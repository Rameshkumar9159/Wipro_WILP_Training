<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>Coding Examples and Scripts</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="coding-examples-and-scripts">
<h1>Coding Examples and Scripts</h1>
<p>This section provides practical coding examples, scripts, and automation tools for storage management on Ubuntu 22.04.</p>
<nav class="contents local" id="contents">
<ul class="simple">
<li><p><a class="reference internal" href="#storage-monitoring-scripts" id="id1">Storage Monitoring Scripts</a></p>
<ul>
<li><p><a class="reference internal" href="#system-storage-health-monitor" id="id2">System Storage Health Monitor</a></p></li>
<li><p><a class="reference internal" href="#automated-backup-script" id="id3">Automated Backup Script</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#raid-management-tools" id="id4">RAID Management Tools</a></p>
<ul>
<li><p><a class="reference internal" href="#raid-status-checker" id="id5">RAID Status Checker</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#lvm-automation-scripts" id="id6">LVM Automation Scripts</a></p>
<ul>
<li><p><a class="reference internal" href="#dynamic-lv-resize-script" id="id7">Dynamic LV Resize Script</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#network-storage-utilities" id="id8">Network Storage Utilities</a></p>
<ul>
<li><p><a class="reference internal" href="#nfs-mount-manager" id="id9">NFS Mount Manager</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#file-system-utilities" id="id10">File System Utilities</a></p>
<ul>
<li><p><a class="reference internal" href="#filesystem-health-checker" id="id11">Filesystem Health Checker</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#performance-testing-scripts" id="id12">Performance Testing Scripts</a></p>
<ul>
<li><p><a class="reference internal" href="#storage-benchmark-suite" id="id13">Storage Benchmark Suite</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#installation-and-usage-instructions" id="id14">Installation and Usage Instructions</a></p>
<ul>
<li><p><a class="reference internal" href="#setting-up-the-environment" id="id15">Setting Up the Environment</a></p></li>
<li><p><a class="reference internal" href="#script-configuration" id="id16">Script Configuration</a></p></li>
</ul>
</li>
<li><p><a class="reference internal" href="#integration-examples" id="id17">Integration Examples</a></p>
<ul>
<li><p><a class="reference internal" href="#systemd-service-integration" id="id18">Systemd Service Integration</a></p></li>
<li><p><a class="reference internal" href="#custom-alerts-integration" id="id19">Custom Alerts Integration</a></p></li>
</ul>
</li>
</ul>
</nav>
<section id="storage-monitoring-scripts">
<h2><a class="toc-backref" href="#id1" role="doc-backlink">Storage Monitoring Scripts</a></h2>
<section id="system-storage-health-monitor">
<h3><a class="toc-backref" href="#id2" role="doc-backlink">System Storage Health Monitor</a></h3>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="ch">#!/usr/bin/env python3</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Storage Health Monitor for Ubuntu 22.04</span>
<span class="sd">Monitors disk usage, SMART status, and filesystem health</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="kn">import</span><span class="w"> </span><span class="nn">subprocess</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">json</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">time</span>
<span class="kn">from</span><span class="w"> </span><span class="nn">datetime</span><span class="w"> </span><span class="kn">import</span> <span class="n">datetime</span>

<span class="k">class</span><span class="w"> </span><span class="nc">StorageMonitor</span><span class="p">:</span>
    <span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">log_file</span> <span class="o">=</span> <span class="s2">&quot;/var/log/storage-monitor.log&quot;</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">get_disk_usage</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Get disk usage for all mounted filesystems&quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;df&#39;</span><span class="p">,</span> <span class="s1">&#39;-h&#39;</span><span class="p">],</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">stdout</span>
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Error getting disk usage: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">check_smart_status</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Check SMART status for a device&quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;smartctl&#39;</span><span class="p">,</span> <span class="s1">&#39;-H&#39;</span><span class="p">,</span> <span class="n">device</span><span class="p">],</span>
                                  <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="s2">&quot;PASSED&quot;</span> <span class="ow">in</span> <span class="n">result</span><span class="o">.</span><span class="n">stdout</span>
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">False</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">get_mounted_devices</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Get list of mounted block devices&quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;lsblk&#39;</span><span class="p">,</span> <span class="s1">&#39;-J&#39;</span><span class="p">],</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
            <span class="n">devices</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">device</span> <span class="ow">in</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;blockdevices&#39;</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">device</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;mountpoint&#39;</span><span class="p">):</span>
                    <span class="n">devices</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">device</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">])</span>
            <span class="k">return</span> <span class="n">devices</span>
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">log_status</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Log status message with timestamp&quot;&quot;&quot;</span>
        <span class="n">timestamp</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-</span><span class="si">%d</span><span class="s2"> %H:%M:%S&quot;</span><span class="p">)</span>
        <span class="n">log_entry</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;[</span><span class="si">{</span><span class="n">timestamp</span><span class="si">}</span><span class="s2">] </span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">log_file</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">log_entry</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Error writing to log: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">monitor</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Main monitoring function&quot;&quot;&quot;</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Storage Health Monitor - Starting...&quot;</span><span class="p">)</span>

        <span class="c1"># Check disk usage</span>
        <span class="n">usage</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_disk_usage</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Disk Usage:&quot;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">usage</span><span class="p">)</span>

        <span class="c1"># Check SMART status for physical drives</span>
        <span class="n">devices</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;/dev/sda&#39;</span><span class="p">,</span> <span class="s1">&#39;/dev/sdb&#39;</span><span class="p">,</span> <span class="s1">&#39;/dev/nvme0n1&#39;</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">device</span> <span class="ow">in</span> <span class="n">devices</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">smart_ok</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">check_smart_status</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
                <span class="n">status</span> <span class="o">=</span> <span class="s2">&quot;HEALTHY&quot;</span> <span class="k">if</span> <span class="n">smart_ok</span> <span class="k">else</span> <span class="s2">&quot;WARNING&quot;</span>
                <span class="n">message</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;SMART status for </span><span class="si">{</span><span class="n">device</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">status</span><span class="si">}</span><span class="s2">&quot;</span>
                <span class="nb">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">log_status</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
            <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Could not check </span><span class="si">{</span><span class="n">device</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

        <span class="c1"># Alert on high usage</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">usage</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]:</span>
            <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">():</span>
                <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">:</span>
                    <span class="n">usage_pct</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">usage_pct</span><span class="o">.</span><span class="n">isdigit</span><span class="p">()</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">usage_pct</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">90</span><span class="p">:</span>
                        <span class="n">alert</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;HIGH USAGE ALERT: </span><span class="si">{</span><span class="n">parts</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="si">}</span><span class="s2"> is </span><span class="si">{</span><span class="n">usage_pct</span><span class="si">}</span><span class="s2">% full&quot;</span>
                        <span class="nb">print</span><span class="p">(</span><span class="n">alert</span><span class="p">)</span>
                        <span class="bp">self</span><span class="o">.</span><span class="n">log_status</span><span class="p">(</span><span class="n">alert</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">monitor</span> <span class="o">=</span> <span class="n">StorageMonitor</span><span class="p">()</span>
    <span class="n">monitor</span><span class="o">.</span><span class="n">monitor</span><span class="p">()</span>
</pre></div>
</div>
</section>
<section id="automated-backup-script">
<h3><a class="toc-backref" href="#id3" role="doc-backlink">Automated Backup Script</a></h3>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="ch">#!/bin/bash</span>
<span class="c1"># Automated Backup Script for Ubuntu 22.04</span>
<span class="c1"># Supports incremental backups with rotation</span>

<span class="nb">set</span><span class="w"> </span>-euo<span class="w"> </span>pipefail

<span class="c1"># Configuration</span>
<span class="nv">SOURCE_DIR</span><span class="o">=</span><span class="s2">&quot;</span><span class="si">${</span><span class="nv">1</span><span class="k">:-</span><span class="p">/home</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="nv">BACKUP_BASE</span><span class="o">=</span><span class="s2">&quot;/backup&quot;</span>
<span class="nv">RETENTION_DAYS</span><span class="o">=</span><span class="m">30</span>
<span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">&quot;/var/log/backup.log&quot;</span>
<span class="nv">DATE</span><span class="o">=</span><span class="k">$(</span>date<span class="w"> </span>+%Y%m%d_%H%M%S<span class="k">)</span>
<span class="nv">BACKUP_DIR</span><span class="o">=</span><span class="s2">&quot;</span><span class="si">${</span><span class="nv">BACKUP_BASE</span><span class="si">}</span><span class="s2">/backup_</span><span class="si">${</span><span class="nv">DATE</span><span class="si">}</span><span class="s2">&quot;</span>

<span class="c1"># Functions</span>
log_message<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="k">$(</span>date<span class="w"> </span><span class="s1">&#39;+%Y-%m-%d %H:%M:%S&#39;</span><span class="k">)</span><span class="s2"> - </span><span class="nv">$1</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>tee<span class="w"> </span>-a<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$LOG_FILE</span><span class="s2">&quot;</span>
<span class="o">}</span>

check_prerequisites<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="nv">$EUID</span><span class="w"> </span>-ne<span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">        </span>log_message<span class="w"> </span><span class="s2">&quot;ERROR: This script must be run as root&quot;</span>
<span class="w">        </span><span class="nb">exit</span><span class="w"> </span><span class="m">1</span>
<span class="w">    </span><span class="k">fi</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span>!<span class="w"> </span><span class="nb">command</span><span class="w"> </span>-v<span class="w"> </span>rsync<span class="w"> </span><span class="p">&amp;</span>&gt;<span class="w"> </span>/dev/null<span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">        </span>log_message<span class="w"> </span><span class="s2">&quot;Installing rsync...&quot;</span>
<span class="w">        </span>apt<span class="w"> </span>update<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>apt<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>rsync
<span class="w">    </span><span class="k">fi</span>

<span class="w">    </span>mkdir<span class="w"> </span>-p<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$BACKUP_BASE</span><span class="s2">&quot;</span>
<span class="o">}</span>

perform_backup<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;Starting backup of </span><span class="nv">$SOURCE_DIR</span><span class="s2"> to </span><span class="nv">$BACKUP_DIR</span><span class="s2">&quot;</span>

<span class="w">    </span><span class="c1"># Find most recent backup for incremental</span>
<span class="w">    </span><span class="nv">LATEST_BACKUP</span><span class="o">=</span><span class="k">$(</span>find<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$BACKUP_BASE</span><span class="s2">&quot;</span><span class="w"> </span>-maxdepth<span class="w"> </span><span class="m">1</span><span class="w"> </span>-type<span class="w"> </span>d<span class="w"> </span>-name<span class="w"> </span><span class="s2">&quot;backup_*&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>sort<span class="w"> </span><span class="p">|</span><span class="w"> </span>tail<span class="w"> </span>-1<span class="k">)</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span>-n<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$LATEST_BACKUP</span><span class="s2">&quot;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>-d<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$LATEST_BACKUP</span><span class="s2">&quot;</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">        </span>log_message<span class="w"> </span><span class="s2">&quot;Performing incremental backup from </span><span class="nv">$LATEST_BACKUP</span><span class="s2">&quot;</span>
<span class="w">        </span>rsync<span class="w"> </span>-av<span class="w"> </span>--link-dest<span class="o">=</span><span class="s2">&quot;</span><span class="nv">$LATEST_BACKUP</span><span class="s2">&quot;</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$SOURCE_DIR</span><span class="s2">/&quot;</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$BACKUP_DIR</span><span class="s2">/&quot;</span>
<span class="w">    </span><span class="k">else</span>
<span class="w">        </span>log_message<span class="w"> </span><span class="s2">&quot;Performing full backup&quot;</span>
<span class="w">        </span>rsync<span class="w"> </span>-av<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$SOURCE_DIR</span><span class="s2">/&quot;</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$BACKUP_DIR</span><span class="s2">/&quot;</span>
<span class="w">    </span><span class="k">fi</span>

<span class="w">    </span><span class="c1"># Create backup manifest</span>
<span class="w">    </span>find<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$BACKUP_DIR</span><span class="s2">&quot;</span><span class="w"> </span>-type<span class="w"> </span>f<span class="w"> </span>-exec<span class="w"> </span>sha256sum<span class="w"> </span><span class="o">{}</span><span class="w"> </span><span class="se">\;</span><span class="w"> </span>&gt;<span class="w"> </span><span class="s2">&quot;</span><span class="si">${</span><span class="nv">BACKUP_DIR</span><span class="si">}</span><span class="s2">/manifest.sha256&quot;</span>
<span class="w">    </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;Backup completed: </span><span class="k">$(</span>date<span class="k">)</span><span class="s2">&quot;</span><span class="w"> </span>&gt;<span class="w"> </span><span class="s2">&quot;</span><span class="si">${</span><span class="nv">BACKUP_DIR</span><span class="si">}</span><span class="s2">/backup_info.txt&quot;</span>
<span class="w">    </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;Source: </span><span class="nv">$SOURCE_DIR</span><span class="s2">&quot;</span><span class="w"> </span>&gt;&gt;<span class="w"> </span><span class="s2">&quot;</span><span class="si">${</span><span class="nv">BACKUP_DIR</span><span class="si">}</span><span class="s2">/backup_info.txt&quot;</span>

<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;Backup completed successfully&quot;</span>
<span class="o">}</span>

cleanup_old_backups<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;Cleaning up backups older than </span><span class="nv">$RETENTION_DAYS</span><span class="s2"> days&quot;</span>
<span class="w">    </span>find<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$BACKUP_BASE</span><span class="s2">&quot;</span><span class="w"> </span>-maxdepth<span class="w"> </span><span class="m">1</span><span class="w"> </span>-type<span class="w"> </span>d<span class="w"> </span>-name<span class="w"> </span><span class="s2">&quot;backup_*&quot;</span><span class="w"> </span>-mtime<span class="w"> </span>+<span class="nv">$RETENTION_DAYS</span><span class="w"> </span>-exec<span class="w"> </span>rm<span class="w"> </span>-rf<span class="w"> </span><span class="o">{}</span><span class="w"> </span><span class="se">\;</span>
<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;Cleanup completed&quot;</span>
<span class="o">}</span>

<span class="c1"># Main execution</span>
main<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;=== Backup Process Started ===&quot;</span>
<span class="w">    </span>check_prerequisites
<span class="w">    </span>perform_backup
<span class="w">    </span>cleanup_old_backups
<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;=== Backup Process Completed ===&quot;</span>
<span class="o">}</span>

<span class="c1"># Error handling</span>
<span class="nb">trap</span><span class="w"> </span><span class="s1">&#39;log_message &quot;ERROR: Backup failed on line $LINENO&quot;&#39;</span><span class="w"> </span>ERR

main<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span>
</pre></div>
</div>
</section>
</section>
<section id="raid-management-tools">
<h2><a class="toc-backref" href="#id4" role="doc-backlink">RAID Management Tools</a></h2>
<section id="raid-status-checker">
<h3><a class="toc-backref" href="#id5" role="doc-backlink">RAID Status Checker</a></h3>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="ch">#!/usr/bin/env python3</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">RAID Status Checker for Ubuntu 22.04</span>
<span class="sd">Monitors software RAID arrays and hardware RAID controllers</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="kn">import</span><span class="w"> </span><span class="nn">subprocess</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">re</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">json</span>
<span class="kn">from</span><span class="w"> </span><span class="nn">pathlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">Path</span>

<span class="k">class</span><span class="w"> </span><span class="nc">RAIDMonitor</span><span class="p">:</span>
    <span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">mdstat_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s1">&#39;/proc/mdstat&#39;</span><span class="p">)</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">check_software_raid</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Check software RAID status from /proc/mdstat&quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">mdstat_path</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>
            <span class="k">return</span> <span class="p">{</span><span class="s2">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;no_raid&quot;</span><span class="p">,</span> <span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="s2">&quot;No software RAID detected&quot;</span><span class="p">}</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">mdstat_path</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>

            <span class="n">arrays</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">lines</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>

            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">lines</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;md&#39;</span><span class="p">):</span>
                    <span class="n">array_info</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parse_md_line</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">lines</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>
                    <span class="n">arrays</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">array_info</span><span class="p">)</span>

            <span class="k">return</span> <span class="p">{</span><span class="s2">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;active&quot;</span><span class="p">,</span> <span class="s2">&quot;arrays&quot;</span><span class="p">:</span> <span class="n">arrays</span><span class="p">}</span>

        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="s2">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;error&quot;</span><span class="p">,</span> <span class="s2">&quot;message&quot;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)}</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">parse_md_line</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">md_line</span><span class="p">,</span> <span class="n">following_lines</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Parse mdstat line for array information&quot;&quot;&quot;</span>
        <span class="n">parts</span> <span class="o">=</span> <span class="n">md_line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="n">array_name</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">array_status</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="k">else</span> <span class="s2">&quot;unknown&quot;</span>

        <span class="c1"># Look for status in following lines</span>
        <span class="n">status_line</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">following_lines</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;md&#39;</span><span class="p">):</span>
                <span class="n">status_line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
                <span class="k">break</span>

        <span class="c1"># Check for rebuild/sync status</span>
        <span class="n">rebuild_match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;\[.*\]\s+.*=\s*(\d+\.\d+)%&#39;</span><span class="p">,</span> <span class="n">status_line</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">{</span>
            <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="n">array_name</span><span class="p">,</span>
            <span class="s2">&quot;status&quot;</span><span class="p">:</span> <span class="n">array_status</span><span class="p">,</span>
            <span class="s2">&quot;devices&quot;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">extract_devices</span><span class="p">(</span><span class="n">md_line</span><span class="p">),</span>
            <span class="s2">&quot;rebuilding&quot;</span><span class="p">:</span> <span class="n">rebuild_match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">rebuild_match</span> <span class="k">else</span> <span class="kc">None</span><span class="p">,</span>
            <span class="s2">&quot;details&quot;</span><span class="p">:</span> <span class="n">status_line</span>
        <span class="p">}</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">extract_devices</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">md_line</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Extract device list from md line&quot;&quot;&quot;</span>
        <span class="c1"># Simple extraction - could be enhanced</span>
        <span class="n">devices</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;[a-z]+\d+\[\d+\]&#39;</span><span class="p">,</span> <span class="n">md_line</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">dev</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;[&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">dev</span> <span class="ow">in</span> <span class="n">devices</span><span class="p">]</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">check_hardware_raid</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Check hardware RAID controllers&quot;&quot;&quot;</span>
        <span class="n">controllers</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="c1"># Check for MegaRAID</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;megacli&#39;</span><span class="p">,</span> <span class="s1">&#39;-AdpAllInfo&#39;</span><span class="p">,</span> <span class="s1">&#39;-aALL&#39;</span><span class="p">],</span>
                                  <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">controllers</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;MegaRAID&quot;</span><span class="p">,</span> <span class="s2">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;detected&quot;</span><span class="p">})</span>
        <span class="k">except</span> <span class="ne">FileNotFoundError</span><span class="p">:</span>
            <span class="k">pass</span>

        <span class="c1"># Check for HP Smart Array</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;hpacucli&#39;</span><span class="p">,</span> <span class="s1">&#39;ctrl&#39;</span><span class="p">,</span> <span class="s1">&#39;all&#39;</span><span class="p">,</span> <span class="s1">&#39;show&#39;</span><span class="p">],</span>
                                  <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">controllers</span><span class="o">.</span><span class="n">append</span><span class="p">({</span><span class="s2">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;HP Smart Array&quot;</span><span class="p">,</span> <span class="s2">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;detected&quot;</span><span class="p">})</span>
        <span class="k">except</span> <span class="ne">FileNotFoundError</span><span class="p">:</span>
            <span class="k">pass</span>

        <span class="k">return</span> <span class="n">controllers</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">get_full_status</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Get complete RAID status report&quot;&quot;&quot;</span>
        <span class="n">report</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s2">&quot;timestamp&quot;</span><span class="p">:</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;date&#39;</span><span class="p">],</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">strip</span><span class="p">(),</span>
            <span class="s2">&quot;software_raid&quot;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">check_software_raid</span><span class="p">(),</span>
            <span class="s2">&quot;hardware_raid&quot;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">check_hardware_raid</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">report</span>

<span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>
    <span class="n">monitor</span> <span class="o">=</span> <span class="n">RAIDMonitor</span><span class="p">()</span>
    <span class="n">status</span> <span class="o">=</span> <span class="n">monitor</span><span class="o">.</span><span class="n">get_full_status</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</div>
</section>
</section>
<section id="lvm-automation-scripts">
<h2><a class="toc-backref" href="#id6" role="doc-backlink">LVM Automation Scripts</a></h2>
<section id="dynamic-lv-resize-script">
<h3><a class="toc-backref" href="#id7" role="doc-backlink">Dynamic LV Resize Script</a></h3>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="ch">#!/bin/bash</span>
<span class="c1"># Dynamic Logical Volume Resize Script</span>
<span class="c1"># Automatically extends LV when usage exceeds threshold</span>

<span class="nb">set</span><span class="w"> </span>-euo<span class="w"> </span>pipefail

<span class="c1"># Configuration</span>
<span class="nv">THRESHOLD</span><span class="o">=</span><span class="m">85</span>
<span class="nv">EXTEND_SIZE</span><span class="o">=</span><span class="s2">&quot;1G&quot;</span>
<span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">&quot;/var/log/lv-autoresize.log&quot;</span>

log_message<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="k">$(</span>date<span class="w"> </span><span class="s1">&#39;+%Y-%m-%d %H:%M:%S&#39;</span><span class="k">)</span><span class="s2"> - </span><span class="nv">$1</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>tee<span class="w"> </span>-a<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$LOG_FILE</span><span class="s2">&quot;</span>
<span class="o">}</span>

check_lv_usage<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="nb">local</span><span class="w"> </span><span class="nv">lv_path</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$1</span><span class="s2">&quot;</span>
<span class="w">    </span><span class="nb">local</span><span class="w"> </span>usage

<span class="w">    </span><span class="nv">usage</span><span class="o">=</span><span class="k">$(</span>df<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$lv_path</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;NR==2 {print $5}&#39;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>sed<span class="w"> </span><span class="s1">&#39;s/%//&#39;</span><span class="k">)</span>
<span class="w">    </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$usage</span><span class="s2">&quot;</span>
<span class="o">}</span>

extend_logical_volume<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="nb">local</span><span class="w"> </span><span class="nv">lv_path</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$1</span><span class="s2">&quot;</span>
<span class="w">    </span><span class="nb">local</span><span class="w"> </span><span class="nv">vg_name</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$2</span><span class="s2">&quot;</span>
<span class="w">    </span><span class="nb">local</span><span class="w"> </span><span class="nv">lv_name</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$3</span><span class="s2">&quot;</span>

<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;Extending </span><span class="nv">$lv_path</span><span class="s2"> by </span><span class="nv">$EXTEND_SIZE</span><span class="s2">&quot;</span>

<span class="w">    </span><span class="c1"># Check VG free space</span>
<span class="w">    </span><span class="nb">local</span><span class="w"> </span>free_space
<span class="w">    </span><span class="nv">free_space</span><span class="o">=</span><span class="k">$(</span>vgs<span class="w"> </span>--noheadings<span class="w"> </span>-o<span class="w"> </span>vg_free<span class="w"> </span>--units<span class="w"> </span>g<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$vg_name</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $1}&#39;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>sed<span class="w"> </span><span class="s1">&#39;s/g//&#39;</span><span class="k">)</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="o">((</span><span class="w"> </span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$free_space</span><span class="s2"> &lt; 1&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>bc<span class="w"> </span>-l<span class="k">)</span><span class="w"> </span><span class="o">))</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">        </span>log_message<span class="w"> </span><span class="s2">&quot;ERROR: Not enough free space in VG </span><span class="nv">$vg_name</span><span class="s2">&quot;</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="m">1</span>
<span class="w">    </span><span class="k">fi</span>

<span class="w">    </span><span class="c1"># Extend LV</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span>lvextend<span class="w"> </span>-L<span class="w"> </span><span class="s2">&quot;+</span><span class="nv">$EXTEND_SIZE</span><span class="s2">&quot;</span><span class="w"> </span><span class="s2">&quot;/dev/</span><span class="nv">$vg_name</span><span class="s2">/</span><span class="nv">$lv_name</span><span class="s2">&quot;</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">        </span><span class="c1"># Resize filesystem</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span>resize2fs<span class="w"> </span><span class="s2">&quot;/dev/</span><span class="nv">$vg_name</span><span class="s2">/</span><span class="nv">$lv_name</span><span class="s2">&quot;</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">            </span>log_message<span class="w"> </span><span class="s2">&quot;Successfully extended </span><span class="nv">$lv_path</span><span class="s2">&quot;</span>
<span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="m">0</span>
<span class="w">        </span><span class="k">else</span>
<span class="w">            </span>log_message<span class="w"> </span><span class="s2">&quot;ERROR: Failed to resize filesystem for </span><span class="nv">$lv_path</span><span class="s2">&quot;</span>
<span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="m">1</span>
<span class="w">        </span><span class="k">fi</span>
<span class="w">    </span><span class="k">else</span>
<span class="w">        </span>log_message<span class="w"> </span><span class="s2">&quot;ERROR: Failed to extend LV </span><span class="nv">$lv_path</span><span class="s2">&quot;</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="m">1</span>
<span class="w">    </span><span class="k">fi</span>
<span class="o">}</span>

monitor_logical_volumes<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="c1"># Get all LVs</span>
<span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="nv">IFS</span><span class="o">=</span><span class="w"> </span><span class="nb">read</span><span class="w"> </span>-r<span class="w"> </span>line<span class="p">;</span><span class="w"> </span><span class="k">do</span>
<span class="w">        </span><span class="nb">local</span><span class="w"> </span>lv_path<span class="w"> </span>vg_name<span class="w"> </span>lv_name
<span class="w">        </span><span class="nv">lv_path</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $1}&#39;</span><span class="k">)</span>
<span class="w">        </span><span class="nv">vg_name</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
<span class="w">        </span><span class="nv">lv_name</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $3}&#39;</span><span class="k">)</span>

<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span>-n<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$lv_path</span><span class="s2">&quot;</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$lv_path</span><span class="s2">&quot;</span><span class="w"> </span>!<span class="o">=</span><span class="w"> </span><span class="s2">&quot;LV&quot;</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">            </span><span class="nb">local</span><span class="w"> </span>usage
<span class="w">            </span><span class="nv">usage</span><span class="o">=</span><span class="k">$(</span>check_lv_usage<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$lv_path</span><span class="s2">&quot;</span><span class="k">)</span>

<span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$usage</span><span class="s2">&quot;</span><span class="w"> </span>-gt<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$THRESHOLD</span><span class="s2">&quot;</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;WARNING: </span><span class="nv">$lv_path</span><span class="s2"> usage is </span><span class="si">${</span><span class="nv">usage</span><span class="si">}</span><span class="s2">%, threshold is </span><span class="si">${</span><span class="nv">THRESHOLD</span><span class="si">}</span><span class="s2">%&quot;</span>
<span class="w">                </span>extend_logical_volume<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$lv_path</span><span class="s2">&quot;</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$vg_name</span><span class="s2">&quot;</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$lv_name</span><span class="s2">&quot;</span>
<span class="w">            </span><span class="k">else</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;INFO: </span><span class="nv">$lv_path</span><span class="s2"> usage is </span><span class="si">${</span><span class="nv">usage</span><span class="si">}</span><span class="s2">% (OK)&quot;</span>
<span class="w">            </span><span class="k">fi</span>
<span class="w">        </span><span class="k">fi</span>
<span class="w">    </span><span class="k">done</span><span class="w"> </span>&lt;<span class="w"> </span>&lt;<span class="o">(</span>lvs<span class="w"> </span>--noheadings<span class="w"> </span>-o<span class="w"> </span>lv_path,vg_name,lv_name<span class="o">)</span>
<span class="o">}</span>

main<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="nv">$EUID</span><span class="w"> </span>-ne<span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">        </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;This script must be run as root&quot;</span>
<span class="w">        </span><span class="nb">exit</span><span class="w"> </span><span class="m">1</span>
<span class="w">    </span><span class="k">fi</span>

<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;=== LV Auto-resize Monitor Started ===&quot;</span>
<span class="w">    </span>monitor_logical_volumes
<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;=== LV Auto-resize Monitor Completed ===&quot;</span>
<span class="o">}</span>

main<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span>
</pre></div>
</div>
</section>
</section>
<section id="network-storage-utilities">
<h2><a class="toc-backref" href="#id8" role="doc-backlink">Network Storage Utilities</a></h2>
<section id="nfs-mount-manager">
<h3><a class="toc-backref" href="#id9" role="doc-backlink">NFS Mount Manager</a></h3>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="ch">#!/usr/bin/env python3</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">NFS Mount Manager for Ubuntu 22.04</span>
<span class="sd">Manages NFS mounts with health checking and auto-recovery</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="kn">import</span><span class="w"> </span><span class="nn">subprocess</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">yaml</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">os</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>
<span class="kn">from</span><span class="w"> </span><span class="nn">pathlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">Path</span>

<span class="k">class</span><span class="w"> </span><span class="nc">NFSManager</span><span class="p">:</span>
    <span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">config_file</span><span class="o">=</span><span class="s1">&#39;/etc/nfs-mounts.yaml&#39;</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">config_file</span> <span class="o">=</span> <span class="n">config_file</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">load_config</span><span class="p">()</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">load_config</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Load NFS mount configuration&quot;&quot;&quot;</span>
        <span class="n">default_config</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s1">&#39;mounts&#39;</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="s1">&#39;server&#39;</span><span class="p">:</span> <span class="s1">&#39;192.168.1.100&#39;</span><span class="p">,</span>
                    <span class="s1">&#39;export&#39;</span><span class="p">:</span> <span class="s1">&#39;/export/shared&#39;</span><span class="p">,</span>
                    <span class="s1">&#39;mountpoint&#39;</span><span class="p">:</span> <span class="s1">&#39;/mnt/nfs-shared&#39;</span><span class="p">,</span>
                    <span class="s1">&#39;options&#39;</span><span class="p">:</span> <span class="s1">&#39;rw,sync,hard,intr&#39;</span><span class="p">,</span>
                    <span class="s1">&#39;auto_mount&#39;</span><span class="p">:</span> <span class="kc">True</span>
                <span class="p">}</span>
            <span class="p">],</span>
            <span class="s1">&#39;timeout&#39;</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
            <span class="s1">&#39;retry_count&#39;</span><span class="p">:</span> <span class="mi">3</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="n">Path</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">config_file</span><span class="p">)</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">config_file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">yaml</span><span class="o">.</span><span class="n">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
            <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Error loading config: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">default_config</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">save_config</span><span class="p">(</span><span class="n">default_config</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">default_config</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">save_config</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">config</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Save configuration to file&quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">config_file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">yaml</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">default_flow_style</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Error saving config: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">check_nfs_server</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">server</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Check if NFS server is reachable&quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;ping&#39;</span><span class="p">,</span> <span class="s1">&#39;-c&#39;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;-W&#39;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">,</span> <span class="n">server</span><span class="p">],</span>
                                  <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span>
        <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">False</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">is_mounted</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mountpoint</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Check if mountpoint is currently mounted&quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;mountpoint&#39;</span><span class="p">,</span> <span class="s1">&#39;-q&#39;</span><span class="p">,</span> <span class="n">mountpoint</span><span class="p">])</span>
            <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span>
        <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="kc">False</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">mount_nfs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mount_config</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Mount an NFS share&quot;&quot;&quot;</span>
        <span class="n">server</span> <span class="o">=</span> <span class="n">mount_config</span><span class="p">[</span><span class="s1">&#39;server&#39;</span><span class="p">]</span>
        <span class="n">export</span> <span class="o">=</span> <span class="n">mount_config</span><span class="p">[</span><span class="s1">&#39;export&#39;</span><span class="p">]</span>
        <span class="n">mountpoint</span> <span class="o">=</span> <span class="n">mount_config</span><span class="p">[</span><span class="s1">&#39;mountpoint&#39;</span><span class="p">]</span>
        <span class="n">options</span> <span class="o">=</span> <span class="n">mount_config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;options&#39;</span><span class="p">,</span> <span class="s1">&#39;rw,sync&#39;</span><span class="p">)</span>

        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Mounting </span><span class="si">{</span><span class="n">server</span><span class="si">}</span><span class="s2">:</span><span class="si">{</span><span class="n">export</span><span class="si">}</span><span class="s2"> -&gt; </span><span class="si">{</span><span class="n">mountpoint</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

        <span class="c1"># Create mountpoint if it doesn&#39;t exist</span>
        <span class="n">Path</span><span class="p">(</span><span class="n">mountpoint</span><span class="p">)</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

        <span class="c1"># Check if already mounted</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_mounted</span><span class="p">(</span><span class="n">mountpoint</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Already mounted: </span><span class="si">{</span><span class="n">mountpoint</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">True</span>

        <span class="c1"># Check server connectivity</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">check_nfs_server</span><span class="p">(</span><span class="n">server</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  ERROR: Cannot reach NFS server </span><span class="si">{</span><span class="n">server</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">False</span>

        <span class="c1"># Mount the share</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">nfs_source</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">server</span><span class="si">}</span><span class="s2">:</span><span class="si">{</span><span class="n">export</span><span class="si">}</span><span class="s2">&quot;</span>
            <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;mount&#39;</span><span class="p">,</span> <span class="s1">&#39;-t&#39;</span><span class="p">,</span> <span class="s1">&#39;nfs&#39;</span><span class="p">,</span> <span class="s1">&#39;-o&#39;</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">nfs_source</span><span class="p">,</span> <span class="n">mountpoint</span><span class="p">]</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Successfully mounted </span><span class="si">{</span><span class="n">mountpoint</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
                <span class="k">return</span> <span class="kc">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  ERROR: Mount failed: </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">stderr</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
                <span class="k">return</span> <span class="kc">False</span>

        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  ERROR: Exception during mount: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">False</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">unmount_nfs</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mountpoint</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Unmount an NFS share&quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_mounted</span><span class="p">(</span><span class="n">mountpoint</span><span class="p">):</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;umount&#39;</span><span class="p">,</span> <span class="n">mountpoint</span><span class="p">],</span>
                                      <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Successfully unmounted </span><span class="si">{</span><span class="n">mountpoint</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
                    <span class="k">return</span> <span class="kc">True</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;ERROR: Unmount failed: </span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">stderr</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
                    <span class="k">return</span> <span class="kc">False</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">mountpoint</span><span class="si">}</span><span class="s2"> is not mounted&quot;</span><span class="p">)</span>
                <span class="k">return</span> <span class="kc">True</span>
        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;ERROR: Exception during unmount: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">False</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">mount_all</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Mount all configured NFS shares&quot;&quot;&quot;</span>
        <span class="n">success_count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">total_count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;mounts&#39;</span><span class="p">])</span>

        <span class="k">for</span> <span class="n">mount_config</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;mounts&#39;</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">mount_config</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;auto_mount&#39;</span><span class="p">,</span> <span class="kc">True</span><span class="p">):</span>
                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">mount_nfs</span><span class="p">(</span><span class="n">mount_config</span><span class="p">):</span>
                    <span class="n">success_count</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Mounted </span><span class="si">{</span><span class="n">success_count</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">total_count</span><span class="si">}</span><span class="s2"> NFS shares&quot;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">success_count</span> <span class="o">==</span> <span class="n">total_count</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">unmount_all</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Unmount all configured NFS shares&quot;&quot;&quot;</span>
        <span class="k">for</span> <span class="n">mount_config</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;mounts&#39;</span><span class="p">]:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">unmount_nfs</span><span class="p">(</span><span class="n">mount_config</span><span class="p">[</span><span class="s1">&#39;mountpoint&#39;</span><span class="p">])</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">health_check</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Check health of all NFS mounts&quot;&quot;&quot;</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;NFS Mount Health Check&quot;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">mount_config</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;mounts&#39;</span><span class="p">]:</span>
            <span class="n">server</span> <span class="o">=</span> <span class="n">mount_config</span><span class="p">[</span><span class="s1">&#39;server&#39;</span><span class="p">]</span>
            <span class="n">mountpoint</span> <span class="o">=</span> <span class="n">mount_config</span><span class="p">[</span><span class="s1">&#39;mountpoint&#39;</span><span class="p">]</span>

            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Checking </span><span class="si">{</span><span class="n">server</span><span class="si">}</span><span class="s2">:</span><span class="si">{</span><span class="n">mount_config</span><span class="p">[</span><span class="s1">&#39;export&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

            <span class="c1"># Check server</span>
            <span class="n">server_ok</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">check_nfs_server</span><span class="p">(</span><span class="n">server</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Server reachable: </span><span class="si">{</span><span class="s1">&#39;YES&#39;</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">server_ok</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="s1">&#39;NO&#39;</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

            <span class="c1"># Check mount</span>
            <span class="n">mounted</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_mounted</span><span class="p">(</span><span class="n">mountpoint</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Mounted: </span><span class="si">{</span><span class="s1">&#39;YES&#39;</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="n">mounted</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="s1">&#39;NO&#39;</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

            <span class="c1"># Check accessibility</span>
            <span class="k">if</span> <span class="n">mounted</span><span class="p">:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">test_file</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">mountpoint</span><span class="p">)</span> <span class="o">/</span> <span class="s1">&#39;.nfs_test&#39;</span>
                    <span class="n">test_file</span><span class="o">.</span><span class="n">touch</span><span class="p">()</span>
                    <span class="n">test_file</span><span class="o">.</span><span class="n">unlink</span><span class="p">()</span>
                    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;  Accessible: YES&quot;</span><span class="p">)</span>
                <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
                    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;  Accessible: NO&quot;</span><span class="p">)</span>

            <span class="nb">print</span><span class="p">()</span>

<span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Usage: nfs-manager.py {mount|unmount|health|mount-all|unmount-all}&quot;</span><span class="p">)</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">geteuid</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;This script must be run as root&quot;</span><span class="p">)</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">manager</span> <span class="o">=</span> <span class="n">NFSManager</span><span class="p">()</span>
    <span class="n">command</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;mount-all&quot;</span><span class="p">:</span>
        <span class="n">manager</span><span class="o">.</span><span class="n">mount_all</span><span class="p">()</span>
    <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;unmount-all&quot;</span><span class="p">:</span>
        <span class="n">manager</span><span class="o">.</span><span class="n">unmount_all</span><span class="p">()</span>
    <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s2">&quot;health&quot;</span><span class="p">:</span>
        <span class="n">manager</span><span class="o">.</span><span class="n">health_check</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Unknown command: </span><span class="si">{</span><span class="n">command</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</div>
</section>
</section>
<section id="file-system-utilities">
<h2><a class="toc-backref" href="#id10" role="doc-backlink">File System Utilities</a></h2>
<section id="filesystem-health-checker">
<h3><a class="toc-backref" href="#id11" role="doc-backlink">Filesystem Health Checker</a></h3>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="ch">#!/bin/bash</span>
<span class="c1"># Comprehensive Filesystem Health Checker for Ubuntu 22.04</span>

<span class="nb">set</span><span class="w"> </span>-euo<span class="w"> </span>pipefail

<span class="c1"># Configuration</span>
<span class="nv">LOG_FILE</span><span class="o">=</span><span class="s2">&quot;/var/log/filesystem-health.log&quot;</span>
<span class="nv">REPORT_FILE</span><span class="o">=</span><span class="s2">&quot;/tmp/filesystem-health-report.txt&quot;</span>

log_message<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="k">$(</span>date<span class="w"> </span><span class="s1">&#39;+%Y-%m-%d %H:%M:%S&#39;</span><span class="k">)</span><span class="s2"> - </span><span class="nv">$1</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>tee<span class="w"> </span>-a<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$LOG_FILE</span><span class="s2">&quot;</span>
<span class="o">}</span>

check_filesystem_errors<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="nb">local</span><span class="w"> </span><span class="nv">device</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$1</span><span class="s2">&quot;</span>
<span class="w">    </span><span class="nb">local</span><span class="w"> </span><span class="nv">fstype</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$2</span><span class="s2">&quot;</span>
<span class="w">    </span><span class="nb">local</span><span class="w"> </span><span class="nv">mountpoint</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$3</span><span class="s2">&quot;</span>

<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;Checking filesystem errors for </span><span class="nv">$device</span><span class="s2"> (</span><span class="nv">$fstype</span><span class="s2">)&quot;</span>

<span class="w">    </span><span class="k">case</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$fstype</span><span class="s2">&quot;</span><span class="w"> </span><span class="k">in</span>
<span class="w">        </span>ext4<span class="p">|</span>ext3<span class="p">|</span>ext2<span class="o">)</span>
<span class="w">            </span><span class="c1"># Check for ext filesystem errors</span>
<span class="w">            </span><span class="nb">local</span><span class="w"> </span>error_count
<span class="w">            </span><span class="nv">error_count</span><span class="o">=</span><span class="k">$(</span>tune2fs<span class="w"> </span>-l<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$device</span><span class="s2">&quot;</span><span class="w"> </span><span class="m">2</span>&gt;/dev/null<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span><span class="s2">&quot;Filesystem errors behavior&quot;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;0&quot;</span><span class="k">)</span>

<span class="w">            </span><span class="k">if</span><span class="w"> </span>dumpe2fs<span class="w"> </span>-h<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$device</span><span class="s2">&quot;</span><span class="w"> </span><span class="m">2</span>&gt;/dev/null<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span>-q<span class="w"> </span><span class="s2">&quot;has_journal&quot;</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;  Journal filesystem detected&quot;</span>
<span class="w">            </span><span class="k">fi</span>

<span class="w">            </span><span class="c1"># Force check if needed</span>
<span class="w">            </span><span class="nb">local</span><span class="w"> </span>mount_count<span class="w"> </span>max_count
<span class="w">            </span><span class="nv">mount_count</span><span class="o">=</span><span class="k">$(</span>tune2fs<span class="w"> </span>-l<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$device</span><span class="s2">&quot;</span><span class="w"> </span><span class="m">2</span>&gt;/dev/null<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span><span class="s2">&quot;Mount count:&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $3}&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;0&quot;</span><span class="k">)</span>
<span class="w">            </span><span class="nv">max_count</span><span class="o">=</span><span class="k">$(</span>tune2fs<span class="w"> </span>-l<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$device</span><span class="s2">&quot;</span><span class="w"> </span><span class="m">2</span>&gt;/dev/null<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span><span class="s2">&quot;Maximum mount count:&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $4}&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;0&quot;</span><span class="k">)</span>

<span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$max_count</span><span class="s2">&quot;</span><span class="w"> </span>-gt<span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$mount_count</span><span class="s2">&quot;</span><span class="w"> </span>-gt<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$max_count</span><span class="s2">&quot;</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;  WARNING: Mount count (</span><span class="nv">$mount_count</span><span class="s2">) exceeds maximum (</span><span class="nv">$max_count</span><span class="s2">)&quot;</span>
<span class="w">            </span><span class="k">fi</span>
<span class="w">            </span><span class="p">;;</span>

<span class="w">        </span>xfs<span class="o">)</span>
<span class="w">            </span><span class="c1"># Check XFS filesystem</span>
<span class="w">            </span><span class="k">if</span><span class="w"> </span>xfs_info<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$mountpoint</span><span class="s2">&quot;</span><span class="w"> </span>&gt;/dev/null<span class="w"> </span><span class="m">2</span>&gt;<span class="p">&amp;</span><span class="m">1</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;  XFS filesystem appears healthy&quot;</span>
<span class="w">            </span><span class="k">else</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;  WARNING: XFS filesystem check failed&quot;</span>
<span class="w">            </span><span class="k">fi</span>
<span class="w">            </span><span class="p">;;</span>

<span class="w">        </span>btrfs<span class="o">)</span>
<span class="w">            </span><span class="c1"># Check Btrfs filesystem</span>
<span class="w">            </span><span class="k">if</span><span class="w"> </span>btrfs<span class="w"> </span>filesystem<span class="w"> </span>show<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$device</span><span class="s2">&quot;</span><span class="w"> </span>&gt;/dev/null<span class="w"> </span><span class="m">2</span>&gt;<span class="p">&amp;</span><span class="m">1</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">                </span><span class="nb">local</span><span class="w"> </span>errors
<span class="w">                </span><span class="nv">errors</span><span class="o">=</span><span class="k">$(</span>btrfs<span class="w"> </span>device<span class="w"> </span>stats<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$device</span><span class="s2">&quot;</span><span class="w"> </span><span class="m">2</span>&gt;/dev/null<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span>-c<span class="w"> </span><span class="s2">&quot;err&quot;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;0&quot;</span><span class="k">)</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;  Btrfs error count: </span><span class="nv">$errors</span><span class="s2">&quot;</span>
<span class="w">            </span><span class="k">fi</span>
<span class="w">            </span><span class="p">;;</span>
<span class="w">    </span><span class="k">esac</span>
<span class="o">}</span>

check_disk_usage<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;Checking disk usage patterns&quot;</span>

<span class="w">    </span>df<span class="w"> </span>-h<span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="k">while</span><span class="w"> </span><span class="nv">IFS</span><span class="o">=</span><span class="w"> </span><span class="nb">read</span><span class="w"> </span>-r<span class="w"> </span>line<span class="p">;</span><span class="w"> </span><span class="k">do</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span>*<span class="s2">&quot;% /&quot;</span>*<span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">            </span><span class="nb">local</span><span class="w"> </span>usage
<span class="w">            </span><span class="nv">usage</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $5}&#39;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>sed<span class="w"> </span><span class="s1">&#39;s/%//&#39;</span><span class="k">)</span>
<span class="w">            </span><span class="nb">local</span><span class="w"> </span>mountpoint
<span class="w">            </span><span class="nv">mountpoint</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $6}&#39;</span><span class="k">)</span>

<span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$usage</span><span class="s2">&quot;</span><span class="w"> </span>-gt<span class="w"> </span><span class="m">90</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;  CRITICAL: </span><span class="nv">$mountpoint</span><span class="s2"> is </span><span class="si">${</span><span class="nv">usage</span><span class="si">}</span><span class="s2">% full&quot;</span>
<span class="w">            </span><span class="k">elif</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$usage</span><span class="s2">&quot;</span><span class="w"> </span>-gt<span class="w"> </span><span class="m">80</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;  WARNING: </span><span class="nv">$mountpoint</span><span class="s2"> is </span><span class="si">${</span><span class="nv">usage</span><span class="si">}</span><span class="s2">% full&quot;</span>
<span class="w">            </span><span class="k">fi</span>
<span class="w">        </span><span class="k">fi</span>
<span class="w">    </span><span class="k">done</span>
<span class="o">}</span>

check_inode_usage<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;Checking inode usage&quot;</span>

<span class="w">    </span>df<span class="w"> </span>-i<span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="k">while</span><span class="w"> </span><span class="nv">IFS</span><span class="o">=</span><span class="w"> </span><span class="nb">read</span><span class="w"> </span>-r<span class="w"> </span>line<span class="p">;</span><span class="w"> </span><span class="k">do</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span>*<span class="s2">&quot;% /&quot;</span>*<span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">            </span><span class="nb">local</span><span class="w"> </span>usage
<span class="w">            </span><span class="nv">usage</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $5}&#39;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>sed<span class="w"> </span><span class="s1">&#39;s/%//&#39;</span><span class="k">)</span>
<span class="w">            </span><span class="nb">local</span><span class="w"> </span>mountpoint
<span class="w">            </span><span class="nv">mountpoint</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $6}&#39;</span><span class="k">)</span>

<span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$usage</span><span class="s2">&quot;</span><span class="w"> </span>-gt<span class="w"> </span><span class="m">90</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;  CRITICAL: </span><span class="nv">$mountpoint</span><span class="s2"> inodes </span><span class="si">${</span><span class="nv">usage</span><span class="si">}</span><span class="s2">% used&quot;</span>
<span class="w">            </span><span class="k">elif</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$usage</span><span class="s2">&quot;</span><span class="w"> </span>-gt<span class="w"> </span><span class="m">80</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">                </span>log_message<span class="w"> </span><span class="s2">&quot;  WARNING: </span><span class="nv">$mountpoint</span><span class="s2"> inodes </span><span class="si">${</span><span class="nv">usage</span><span class="si">}</span><span class="s2">% used&quot;</span>
<span class="w">            </span><span class="k">fi</span>
<span class="w">        </span><span class="k">fi</span>
<span class="w">    </span><span class="k">done</span>
<span class="o">}</span>

generate_report<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="o">{</span>
<span class="w">        </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;Filesystem Health Report&quot;</span>
<span class="w">        </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;Generated: </span><span class="k">$(</span>date<span class="k">)</span><span class="s2">&quot;</span>
<span class="w">        </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;==========================================&quot;</span>
<span class="w">        </span><span class="nb">echo</span>

<span class="w">        </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;DISK USAGE:&quot;</span>
<span class="w">        </span>df<span class="w"> </span>-h
<span class="w">        </span><span class="nb">echo</span>

<span class="w">        </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;INODE USAGE:&quot;</span>
<span class="w">        </span>df<span class="w"> </span>-i
<span class="w">        </span><span class="nb">echo</span>

<span class="w">        </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;MOUNTED FILESYSTEMS:&quot;</span>
<span class="w">        </span>mount<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span>-E<span class="w"> </span><span class="s1">&#39;^/dev/&#39;</span>
<span class="w">        </span><span class="nb">echo</span>

<span class="w">        </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;FILESYSTEM TYPES:&quot;</span>
<span class="w">        </span>lsblk<span class="w"> </span>-f
<span class="w">        </span><span class="nb">echo</span>

<span class="w">        </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;RECENT LOG ENTRIES:&quot;</span>
<span class="w">        </span>tail<span class="w"> </span>-20<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$LOG_FILE</span><span class="s2">&quot;</span>

<span class="w">    </span><span class="o">}</span><span class="w"> </span>&gt;<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$REPORT_FILE</span><span class="s2">&quot;</span>

<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;Health report generated: </span><span class="nv">$REPORT_FILE</span><span class="s2">&quot;</span>
<span class="o">}</span>

main<span class="o">()</span><span class="w"> </span><span class="o">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="nv">$EUID</span><span class="w"> </span>-ne<span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">        </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;This script should be run as root for complete checks&quot;</span>
<span class="w">    </span><span class="k">fi</span>

<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;=== Filesystem Health Check Started ===&quot;</span>

<span class="w">    </span><span class="c1"># Get mounted filesystems</span>
<span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="nv">IFS</span><span class="o">=</span><span class="w"> </span><span class="nb">read</span><span class="w"> </span>-r<span class="w"> </span>line<span class="p">;</span><span class="w"> </span><span class="k">do</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="o">[[</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span>/dev/*<span class="w"> </span><span class="o">]]</span><span class="p">;</span><span class="w"> </span><span class="k">then</span>
<span class="w">            </span><span class="nb">local</span><span class="w"> </span>device<span class="w"> </span>fstype<span class="w"> </span>mountpoint
<span class="w">            </span><span class="nv">device</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $1}&#39;</span><span class="k">)</span>
<span class="w">            </span><span class="nv">fstype</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $3}&#39;</span><span class="k">)</span>
<span class="w">            </span><span class="nv">mountpoint</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$line</span><span class="s2">&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>awk<span class="w"> </span><span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>

<span class="w">            </span>check_filesystem_errors<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$device</span><span class="s2">&quot;</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$fstype</span><span class="s2">&quot;</span><span class="w"> </span><span class="s2">&quot;</span><span class="nv">$mountpoint</span><span class="s2">&quot;</span>
<span class="w">        </span><span class="k">fi</span>
<span class="w">    </span><span class="k">done</span><span class="w"> </span>&lt;<span class="w"> </span>&lt;<span class="o">(</span>mount<span class="w"> </span><span class="p">|</span><span class="w"> </span>grep<span class="w"> </span>-E<span class="w"> </span><span class="s1">&#39;^/dev/&#39;</span><span class="o">)</span>

<span class="w">    </span>check_disk_usage
<span class="w">    </span>check_inode_usage
<span class="w">    </span>generate_report

<span class="w">    </span>log_message<span class="w"> </span><span class="s2">&quot;=== Filesystem Health Check Completed ===&quot;</span>

<span class="w">    </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;Health check completed. Report available at: </span><span class="nv">$REPORT_FILE</span><span class="s2">&quot;</span>
<span class="w">    </span><span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;Log file: </span><span class="nv">$LOG_FILE</span><span class="s2">&quot;</span>
<span class="o">}</span>

main<span class="w"> </span><span class="s2">&quot;</span><span class="nv">$@</span><span class="s2">&quot;</span>
</pre></div>
</div>
</section>
</section>
<section id="performance-testing-scripts">
<h2><a class="toc-backref" href="#id12" role="doc-backlink">Performance Testing Scripts</a></h2>
<section id="storage-benchmark-suite">
<h3><a class="toc-backref" href="#id13" role="doc-backlink">Storage Benchmark Suite</a></h3>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="ch">#!/usr/bin/env python3</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">Storage Performance Benchmark Suite for Ubuntu 22.04</span>
<span class="sd">Tests various storage scenarios and generates performance reports</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="kn">import</span><span class="w"> </span><span class="nn">subprocess</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">time</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">json</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">os</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">sys</span>
<span class="kn">from</span><span class="w"> </span><span class="nn">pathlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">Path</span>

<span class="k">class</span><span class="w"> </span><span class="nc">StorageBenchmark</span><span class="p">:</span>
    <span class="k">def</span><span class="w"> </span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">test_dir</span><span class="o">=</span><span class="s2">&quot;/tmp/storage_test&quot;</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">test_dir</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">test_dir</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">test_dir</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">results</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">run_dd_test</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">test_name</span><span class="p">,</span> <span class="n">block_size</span><span class="o">=</span><span class="s2">&quot;1M&quot;</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">1024</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Run DD-based I/O test&quot;&quot;&quot;</span>
        <span class="n">test_file</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">test_dir</span> <span class="o">/</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">test_name</span><span class="si">}</span><span class="s2">.dat&quot;</span>

        <span class="c1"># Write test</span>
        <span class="n">write_start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;dd&#39;</span><span class="p">,</span> <span class="sa">f</span><span class="s1">&#39;if=/dev/zero&#39;</span><span class="p">,</span> <span class="sa">f</span><span class="s1">&#39;of=</span><span class="si">{</span><span class="n">test_file</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span>
               <span class="sa">f</span><span class="s1">&#39;bs=</span><span class="si">{</span><span class="n">block_size</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="sa">f</span><span class="s1">&#39;count=</span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;conv=fdatasync&#39;</span><span class="p">]</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="n">write_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">write_start</span>

            <span class="c1"># Parse DD output for speed</span>
            <span class="n">write_speed</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parse_dd_output</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">stderr</span><span class="p">)</span>

            <span class="c1"># Read test</span>
            <span class="n">read_start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
            <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;dd&#39;</span><span class="p">,</span> <span class="sa">f</span><span class="s1">&#39;if=</span><span class="si">{</span><span class="n">test_file</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;of=/dev/null&#39;</span><span class="p">,</span> <span class="sa">f</span><span class="s1">&#39;bs=</span><span class="si">{</span><span class="n">block_size</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">]</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="n">read_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">read_start</span>

            <span class="n">read_speed</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parse_dd_output</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">stderr</span><span class="p">)</span>

            <span class="c1"># Cleanup</span>
            <span class="n">test_file</span><span class="o">.</span><span class="n">unlink</span><span class="p">()</span>

            <span class="k">return</span> <span class="p">{</span>
                <span class="s1">&#39;write_time&#39;</span><span class="p">:</span> <span class="n">write_time</span><span class="p">,</span>
                <span class="s1">&#39;read_time&#39;</span><span class="p">:</span> <span class="n">read_time</span><span class="p">,</span>
                <span class="s1">&#39;write_speed&#39;</span><span class="p">:</span> <span class="n">write_speed</span><span class="p">,</span>
                <span class="s1">&#39;read_speed&#39;</span><span class="p">:</span> <span class="n">read_speed</span><span class="p">,</span>
                <span class="s1">&#39;block_size&#39;</span><span class="p">:</span> <span class="n">block_size</span><span class="p">,</span>
                <span class="s1">&#39;data_size&#39;</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">count</span><span class="si">}{</span><span class="n">block_size</span><span class="si">}</span><span class="s2">&quot;</span>
            <span class="p">}</span>

        <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="s1">&#39;error&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)}</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">parse_dd_output</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dd_stderr</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Parse DD output to extract transfer rate&quot;&quot;&quot;</span>
        <span class="kn">import</span><span class="w"> </span><span class="nn">re</span>

        <span class="c1"># Look for patterns like &quot;1.0 GB/s&quot; or &quot;500 MB/s&quot;</span>
        <span class="n">pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s1">&#39;(\d+\.?\d*)\s*([KMGT]?B/s)&#39;</span>
        <span class="n">match</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">dd_stderr</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">match</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">match</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
        <span class="k">return</span> <span class="s2">&quot;Unknown&quot;</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">run_fio_test</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">test_name</span><span class="p">,</span> <span class="n">job_config</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Run FIO benchmark if available&quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Check if fio is available</span>
            <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;which&#39;</span><span class="p">,</span> <span class="s1">&#39;fio&#39;</span><span class="p">],</span> <span class="n">check</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

            <span class="c1"># Create FIO job file</span>
            <span class="n">job_file</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">test_dir</span> <span class="o">/</span> <span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">test_name</span><span class="si">}</span><span class="s2">.fio&quot;</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">job_file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">job_config</span><span class="p">)</span>

            <span class="c1"># Run FIO</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;fio&#39;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">job_file</span><span class="p">),</span> <span class="s1">&#39;--output-format=json&#39;</span><span class="p">],</span>
                                  <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">result</span><span class="o">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">fio_data</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">stdout</span><span class="p">)</span>
                <span class="n">job_file</span><span class="o">.</span><span class="n">unlink</span><span class="p">()</span>
                <span class="k">return</span> <span class="n">fio_data</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">{</span><span class="s1">&#39;error&#39;</span><span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="n">stderr</span><span class="p">}</span>

        <span class="k">except</span> <span class="p">(</span><span class="n">subprocess</span><span class="o">.</span><span class="n">CalledProcessError</span><span class="p">,</span> <span class="ne">FileNotFoundError</span><span class="p">):</span>
            <span class="k">return</span> <span class="p">{</span><span class="s1">&#39;error&#39;</span><span class="p">:</span> <span class="s1">&#39;FIO not available&#39;</span><span class="p">}</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">run_sequential_tests</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Run sequential I/O tests&quot;&quot;&quot;</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Running sequential I/O tests...&quot;</span><span class="p">)</span>

        <span class="c1"># Various block sizes</span>
        <span class="n">block_sizes</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;4K&#39;</span><span class="p">,</span> <span class="s1">&#39;64K&#39;</span><span class="p">,</span> <span class="s1">&#39;1M&#39;</span><span class="p">,</span> <span class="s1">&#39;4M&#39;</span><span class="p">]</span>

        <span class="k">for</span> <span class="n">bs</span> <span class="ow">in</span> <span class="n">block_sizes</span><span class="p">:</span>
            <span class="n">test_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&quot;sequential_</span><span class="si">{</span><span class="n">bs</span><span class="si">}</span><span class="s2">&quot;</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Testing </span><span class="si">{</span><span class="n">bs</span><span class="si">}</span><span class="s2"> blocks...&quot;</span><span class="p">)</span>
            <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">run_dd_test</span><span class="p">(</span><span class="n">test_name</span><span class="p">,</span> <span class="n">bs</span><span class="p">,</span> <span class="mi">256</span> <span class="k">if</span> <span class="n">bs</span> <span class="o">==</span> <span class="s1">&#39;4M&#39;</span> <span class="k">else</span> <span class="mi">1024</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="n">test_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">run_random_tests</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Run random I/O tests using FIO&quot;&quot;&quot;</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Running random I/O tests...&quot;</span><span class="p">)</span>

        <span class="c1"># Random read test</span>
        <span class="n">random_read_config</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;</span>
<span class="s2">[random_read]</span>
<span class="s2">ioengine=libaio</span>
<span class="s2">rw=randread</span>
<span class="s2">bs=4k</span>
<span class="s2">direct=1</span>
<span class="s2">size=100M</span>
<span class="s2">numjobs=1</span>
<span class="s2">runtime=30</span>
<span class="s2">group_reporting</span>
<span class="s2">filename=</span><span class="si">{}</span><span class="s2">/random_read.dat</span>
<span class="s2">&quot;&quot;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">test_dir</span><span class="p">)</span>

        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">run_fio_test</span><span class="p">(</span><span class="s2">&quot;random_read&quot;</span><span class="p">,</span> <span class="n">random_read_config</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="s1">&#39;random_read&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>

        <span class="c1"># Random write test</span>
        <span class="n">random_write_config</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;</span>
<span class="s2">[random_write]</span>
<span class="s2">ioengine=libaio</span>
<span class="s2">rw=randwrite</span>
<span class="s2">bs=4k</span>
<span class="s2">direct=1</span>
<span class="s2">size=100M</span>
<span class="s2">numjobs=1</span>
<span class="s2">runtime=30</span>
<span class="s2">group_reporting</span>
<span class="s2">filename=</span><span class="si">{}</span><span class="s2">/random_write.dat</span>
<span class="s2">&quot;&quot;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">test_dir</span><span class="p">)</span>

        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">run_fio_test</span><span class="p">(</span><span class="s2">&quot;random_write&quot;</span><span class="p">,</span> <span class="n">random_write_config</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="p">[</span><span class="s1">&#39;random_write&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">generate_report</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Generate performance report&quot;&quot;&quot;</span>
        <span class="n">report_file</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">test_dir</span> <span class="o">/</span> <span class="s2">&quot;benchmark_report.json&quot;</span>

        <span class="n">report</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s1">&#39;timestamp&#39;</span><span class="p">:</span> <span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1"> %H:%M:%S&#39;</span><span class="p">),</span>
            <span class="s1">&#39;test_directory&#39;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">test_dir</span><span class="p">),</span>
            <span class="s1">&#39;system_info&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_system_info</span><span class="p">(),</span>
            <span class="s1">&#39;results&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">results</span>
        <span class="p">}</span>

        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">report_file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">report</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

        <span class="c1"># Generate human-readable summary</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">print_summary</span><span class="p">()</span>

        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Detailed report saved to: </span><span class="si">{</span><span class="n">report_file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">get_system_info</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Get system information&quot;&quot;&quot;</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Get CPU info</span>
            <span class="n">cpu_info</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;lscpu&#39;</span><span class="p">],</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">stdout</span>

            <span class="c1"># Get memory info</span>
            <span class="n">mem_info</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;free&#39;</span><span class="p">,</span> <span class="s1">&#39;-h&#39;</span><span class="p">],</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">stdout</span>

            <span class="c1"># Get storage info</span>
            <span class="n">storage_info</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">([</span><span class="s1">&#39;lsblk&#39;</span><span class="p">],</span> <span class="n">capture_output</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span><span class="o">.</span><span class="n">stdout</span>

            <span class="k">return</span> <span class="p">{</span>
                <span class="s1">&#39;cpu&#39;</span><span class="p">:</span> <span class="n">cpu_info</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)[:</span><span class="mi">10</span><span class="p">],</span>  <span class="c1"># First 10 lines</span>
                <span class="s1">&#39;memory&#39;</span><span class="p">:</span> <span class="n">mem_info</span><span class="p">,</span>
                <span class="s1">&#39;storage&#39;</span><span class="p">:</span> <span class="n">storage_info</span>
            <span class="p">}</span>
        <span class="k">except</span> <span class="ne">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="s1">&#39;error&#39;</span><span class="p">:</span> <span class="s1">&#39;Could not gather system info&#39;</span><span class="p">}</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">print_summary</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Print benchmark summary&quot;&quot;&quot;</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="s2">&quot;=&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;STORAGE BENCHMARK SUMMARY&quot;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;=&quot;</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">test_name</span><span class="p">,</span> <span class="n">result</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">results</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="s1">&#39;error&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="si">{</span><span class="n">test_name</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span><span class="si">}</span><span class="s2">:&quot;</span><span class="p">)</span>
                <span class="k">if</span> <span class="s1">&#39;write_speed&#39;</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
                    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Write Speed: </span><span class="si">{</span><span class="n">result</span><span class="p">[</span><span class="s1">&#39;write_speed&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
                    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Read Speed:  </span><span class="si">{</span><span class="n">result</span><span class="p">[</span><span class="s1">&#39;read_speed&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
                <span class="k">elif</span> <span class="s1">&#39;jobs&#39;</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>  <span class="c1"># FIO result</span>
                    <span class="k">for</span> <span class="n">job</span> <span class="ow">in</span> <span class="n">result</span><span class="p">[</span><span class="s1">&#39;jobs&#39;</span><span class="p">]:</span>
                        <span class="k">if</span> <span class="s1">&#39;read&#39;</span> <span class="ow">in</span> <span class="n">job</span><span class="p">:</span>
                            <span class="n">iops</span> <span class="o">=</span> <span class="n">job</span><span class="p">[</span><span class="s1">&#39;read&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;iops&#39;</span><span class="p">,</span> <span class="s1">&#39;N/A&#39;</span><span class="p">)</span>
                            <span class="n">bw</span> <span class="o">=</span> <span class="n">job</span><span class="p">[</span><span class="s1">&#39;read&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;bw&#39;</span><span class="p">,</span> <span class="s1">&#39;N/A&#39;</span><span class="p">)</span>
                            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Read IOPS:   </span><span class="si">{</span><span class="n">iops</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
                            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Read BW:     </span><span class="si">{</span><span class="n">bw</span><span class="si">}</span><span class="s2"> KB/s&quot;</span><span class="p">)</span>
                        <span class="k">if</span> <span class="s1">&#39;write&#39;</span> <span class="ow">in</span> <span class="n">job</span><span class="p">:</span>
                            <span class="n">iops</span> <span class="o">=</span> <span class="n">job</span><span class="p">[</span><span class="s1">&#39;write&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;iops&#39;</span><span class="p">,</span> <span class="s1">&#39;N/A&#39;</span><span class="p">)</span>
                            <span class="n">bw</span> <span class="o">=</span> <span class="n">job</span><span class="p">[</span><span class="s1">&#39;write&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;bw&#39;</span><span class="p">,</span> <span class="s1">&#39;N/A&#39;</span><span class="p">)</span>
                            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Write IOPS:  </span><span class="si">{</span><span class="n">iops</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
                            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;  Write BW:    </span><span class="si">{</span><span class="n">bw</span><span class="si">}</span><span class="s2"> KB/s&quot;</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="se">\n</span><span class="si">{</span><span class="n">test_name</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span><span class="si">}</span><span class="s2">: ERROR - </span><span class="si">{</span><span class="n">result</span><span class="p">[</span><span class="s1">&#39;error&#39;</span><span class="p">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">run_all_tests</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Run complete benchmark suite&quot;&quot;&quot;</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Starting Storage Benchmark Suite&quot;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;This may take several minutes...&quot;</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">run_sequential_tests</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">run_random_tests</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">generate_report</span><span class="p">()</span>

        <span class="c1"># Cleanup</span>
        <span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">test_dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;*.dat&quot;</span><span class="p">):</span>
            <span class="n">file</span><span class="o">.</span><span class="n">unlink</span><span class="p">()</span>

<span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">test_dir</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">test_dir</span> <span class="o">=</span> <span class="s2">&quot;/tmp/storage_test&quot;</span>

    <span class="n">benchmark</span> <span class="o">=</span> <span class="n">StorageBenchmark</span><span class="p">(</span><span class="n">test_dir</span><span class="p">)</span>
    <span class="n">benchmark</span><span class="o">.</span><span class="n">run_all_tests</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</div>
</section>
</section>
<section id="installation-and-usage-instructions">
<h2><a class="toc-backref" href="#id14" role="doc-backlink">Installation and Usage Instructions</a></h2>
<section id="setting-up-the-environment">
<h3><a class="toc-backref" href="#id15" role="doc-backlink">Setting Up the Environment</a></h3>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># Install required packages</span>
sudo<span class="w"> </span>apt<span class="w"> </span>update
sudo<span class="w"> </span>apt<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>python3-pip<span class="w"> </span>smartmontools<span class="w"> </span>fio

<span class="c1"># Install Python dependencies</span>
pip3<span class="w"> </span>install<span class="w"> </span>pyyaml

<span class="c1"># Make scripts executable</span>
chmod<span class="w"> </span>+x<span class="w"> </span>*.py<span class="w"> </span>*.sh

<span class="c1"># Create necessary directories</span>
sudo<span class="w"> </span>mkdir<span class="w"> </span>-p<span class="w"> </span>/var/log<span class="w"> </span>/backup
</pre></div>
</div>
</section>
<section id="script-configuration">
<h3><a class="toc-backref" href="#id16" role="doc-backlink">Script Configuration</a></h3>
<p><strong>Storage Monitor Configuration:</strong></p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># Set up cron job for automated monitoring</span>
<span class="nb">echo</span><span class="w"> </span><span class="s2">&quot;0 */6 * * * root /path/to/storage-monitor.py&quot;</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>sudo<span class="w"> </span>tee<span class="w"> </span>-a<span class="w"> </span>/etc/crontab

<span class="c1"># Configure log rotation</span>
sudo<span class="w"> </span>tee<span class="w"> </span>/etc/logrotate.d/storage-monitor<span class="w"> </span><span class="s">&lt;&lt; EOF</span>
<span class="s">/var/log/storage-monitor.log {</span>
<span class="s">    daily</span>
<span class="s">    rotate 30</span>
<span class="s">    compress</span>
<span class="s">    missingok</span>
<span class="s">    create 644 root root</span>
<span class="s">}</span>
<span class="s">EOF</span>
</pre></div>
</div>
<p><strong>NFS Manager Setup:</strong></p>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># Install NFS utilities</span>
sudo<span class="w"> </span>apt<span class="w"> </span>install<span class="w"> </span>-y<span class="w"> </span>nfs-common

<span class="c1"># Create configuration file</span>
sudo<span class="w"> </span>tee<span class="w"> </span>/etc/nfs-mounts.yaml<span class="w"> </span><span class="s">&lt;&lt; EOF</span>
<span class="s">mounts:</span>
<span class="s">  - server: &quot;your-nfs-server.local&quot;</span>
<span class="s">    export: &quot;/export/data&quot;</span>
<span class="s">    mountpoint: &quot;/mnt/nfs-data&quot;</span>
<span class="s">    options: &quot;rw,sync,hard,intr&quot;</span>
<span class="s">    auto_mount: true</span>
<span class="s">timeout: 30</span>
<span class="s">retry_count: 3</span>
<span class="s">EOF</span>
</pre></div>
</div>
</section>
</section>
<section id="integration-examples">
<h2><a class="toc-backref" href="#id17" role="doc-backlink">Integration Examples</a></h2>
<section id="systemd-service-integration">
<h3><a class="toc-backref" href="#id18" role="doc-backlink">Systemd Service Integration</a></h3>
<div class="highlight-ini notranslate"><div class="highlight"><pre><span></span><span class="c1"># /etc/systemd/system/storage-monitor.service</span>
<span class="k">[Unit]</span>
<span class="na">Description</span><span class="o">=</span><span class="s">Storage Health Monitor</span>
<span class="na">After</span><span class="o">=</span><span class="s">multi-user.target</span>

<span class="k">[Service]</span>
<span class="na">Type</span><span class="o">=</span><span class="s">oneshot</span>
<span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/local/bin/storage-monitor.py</span>
<span class="na">User</span><span class="o">=</span><span class="s">root</span>

<span class="k">[Install]</span>
<span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</pre></div>
</div>
<div class="highlight-bash notranslate"><div class="highlight"><pre><span></span><span class="c1"># Enable and start the service</span>
sudo<span class="w"> </span>systemctl<span class="w"> </span>daemon-reload
sudo<span class="w"> </span>systemctl<span class="w"> </span><span class="nb">enable</span><span class="w"> </span>storage-monitor.service
sudo<span class="w"> </span>systemctl<span class="w"> </span>start<span class="w"> </span>storage-monitor.service
</pre></div>
</div>
</section>
<section id="custom-alerts-integration">
<h3><a class="toc-backref" href="#id19" role="doc-backlink">Custom Alerts Integration</a></h3>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="c1"># Email alert integration</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">smtplib</span>
<span class="kn">from</span><span class="w"> </span><span class="nn">email.mime.text</span><span class="w"> </span><span class="kn">import</span> <span class="n">MIMEText</span>

<span class="k">def</span><span class="w"> </span><span class="nf">send_alert</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">MIMEText</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="n">msg</span><span class="p">[</span><span class="s1">&#39;Subject&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">subject</span>
    <span class="n">msg</span><span class="p">[</span><span class="s1">&#39;From&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;storage-monitor@yourserver.com&#39;</span>
    <span class="n">msg</span><span class="p">[</span><span class="s1">&#39;To&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;admin@yourserver.com&#39;</span>

    <span class="n">server</span> <span class="o">=</span> <span class="n">smtplib</span><span class="o">.</span><span class="n">SMTP</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">)</span>
    <span class="n">server</span><span class="o">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
    <span class="n">server</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>
</pre></div>
</div>
<p>These scripts provide a comprehensive foundation for storage management automation on Ubuntu 22.04. They can be customized and extended based on specific requirements and integrated into larger system management frameworks.</p>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>
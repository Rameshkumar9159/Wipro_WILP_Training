Disk Management
***************


Understanding Disk Management
=============================

Disk management involves the organization, partitioning, formatting,
and maintenance of storage devices. In Ubuntu 22.04, disk management
is crucial for optimal system performance and data organization.


Disk Management Fundamentals
----------------------------


What is Disk Management?
~~~~~~~~~~~~~~~~~~~~~~~~

Disk management encompasses:

* **Partitioning**: Dividing physical disks into logical sections

* **Formatting**: Preparing partitions with file systems

* **Mounting**: Making partitions accessible to the operating system

* **Monitoring**: Tracking disk health and performance

* **Maintenance**: Optimizing and repairing disk issues


Disk Types and Interfaces
-------------------------


Physical Disk Types
~~~~~~~~~~~~~~~~~~~

1. **Hard Disk Drives (HDD)**

   * Mechanical storage with spinning platters

   * Lower cost per GB

   * Higher latency, slower access times

   * Good for bulk storage and archival

2. **Solid State Drives (SSD)**

   * Flash memory-based storage

   * Faster access times, lower latency

   * Higher cost per GB

   * Ideal for operating systems and applications

3. **NVMe SSDs**

   * PCIe-based interface

   * Highest performance storage

   * Direct CPU communication

   * Best for high-performance applications


Interface Types
~~~~~~~~~~~~~~~

   SATA (Serial ATA)
   ├── SATA I: 1.5 Gbps
   ├── SATA II: 3.0 Gbps
   └── SATA III: 6.0 Gbps

   NVMe (Non-Volatile Memory Express)
   ├── PCIe 3.0: Up to 32 Gbps
   └── PCIe 4.0: Up to 64 Gbps


Ubuntu 22.04 Disk Management Commands
-------------------------------------


Essential Disk Commands
~~~~~~~~~~~~~~~~~~~~~~~

   # List all block devices
   lsblk

   # Display partition tables
   sudo fdisk -l

   # Show disk usage by filesystem
   df -h

   # Display directory sizes
   du -sh /home/*

   # List mounted filesystems
   mount | column -t

   # Show disk I/O statistics
   iostat -x 1


Advanced Disk Information
~~~~~~~~~~~~~~~~~~~~~~~~~

   # Detailed disk information
   sudo lshw -class disk

   # SMART disk health information
   sudo smartctl -a /dev/sda

   # Disk geometry information
   sudo hdparm -g /dev/sda

   # Check bad blocks
   sudo badblocks -v /dev/sda

   # Display partition UUID
   sudo blkid


Partitioning with fdisk
-----------------------


Creating Partitions
~~~~~~~~~~~~~~~~~~~

   # Start fdisk for a specific disk
   sudo fdisk /dev/sdb

   # Within fdisk:
   # n - Create new partition
   # d - Delete partition
   # p - Print partition table
   # w - Write changes and exit
   # q - Quit without saving

   # Example: Create a new primary partition
   sudo fdisk /dev/sdb << EOF
   n
   p
   1


   w
   EOF


Partitioning with parted
~~~~~~~~~~~~~~~~~~~~~~~~

   # Create GPT partition table
   sudo parted /dev/sdb mklabel gpt

   # Create partition
   sudo parted /dev/sdb mkpart primary ext4 0% 100%

   # Set partition flags
   sudo parted /dev/sdb set 1 boot on

   # Display partition information
   sudo parted /dev/sdb print


Filesystem Creation and Management
----------------------------------


Creating Filesystems
~~~~~~~~~~~~~~~~~~~~

   # Create ext4 filesystem
   sudo mkfs.ext4 /dev/sdb1

   # Create XFS filesystem
   sudo mkfs.xfs /dev/sdb1

   # Create Btrfs filesystem
   sudo mkfs.btrfs /dev/sdb1

   # Create FAT32 filesystem
   sudo mkfs.fat -F32 /dev/sdb1


Filesystem Checking and Repair
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   # Check ext4 filesystem
   sudo fsck.ext4 /dev/sdb1

   # Force check even if clean
   sudo fsck.ext4 -f /dev/sdb1

   # Check and repair filesystem
   sudo fsck.ext4 -p /dev/sdb1

   # Check XFS filesystem
   sudo xfs_check /dev/sdb1


Mounting and Unmounting
-----------------------


Manual Mounting
~~~~~~~~~~~~~~~

   # Create mount point
   sudo mkdir /mnt/mydisk

   # Mount filesystem
   sudo mount /dev/sdb1 /mnt/mydisk

   # Mount with specific options
   sudo mount -o rw,noatime /dev/sdb1 /mnt/mydisk

   # Unmount filesystem
   sudo umount /mnt/mydisk

   # Force unmount (use carefully)
   sudo umount -f /mnt/mydisk


Automatic Mounting with /etc/fstab
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   # Edit fstab file
   sudo vim /etc/fstab

   # Example fstab entries:
   # UUID=12345678-1234-1234-1234-123456789012 /mnt/mydisk ext4 defaults 0 2
   # /dev/sdb1 /mnt/backup ext4 rw,noatime 0 2

   # Get UUID of a partition
   sudo blkid /dev/sdb1

   # Test fstab configuration
   sudo mount -a


Frequently Asked Questions
--------------------------


Q: How do I check disk space usage on Ubuntu 22.04?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**A:** Use these commands to check disk space:

   # Overall disk usage
   df -h

   # Specific directory usage
   du -sh /home/username

   # Interactive disk usage browser
   sudo apt install ncdu
   ncdu /


Q: What's the difference between fdisk and parted?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**A:**

* **fdisk**: Traditional partitioning tool, best for MBR partitions

* **parted**: Modern tool supporting both MBR and GPT, better for
  large disks (>2TB)

   # fdisk - good for disks < 2TB
   sudo fdisk /dev/sdb

   # parted - better for large disks and GPT
   sudo parted /dev/sdb


Q: How do I resize a partition without losing data?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**A:** Use these steps carefully:

   # 1. Backup your data first!
   # 2. Unmount the partition
   sudo umount /dev/sdb1

   # 3. Check filesystem
   sudo fsck -f /dev/sdb1

   # 4. Resize partition with parted
   sudo parted /dev/sdb resizepart 1 100%

   # 5. Resize filesystem
   sudo resize2fs /dev/sdb1

   # 6. Remount
   sudo mount /dev/sdb1 /mnt/mydisk


Q: How can I securely wipe a disk?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**A:** Several methods for secure disk wiping:

   # Method 1: Using dd (single pass)
   sudo dd if=/dev/zero of=/dev/sdb bs=1M status=progress

   # Method 2: Using shred (multiple passes)
   sudo shred -vfz -n 3 /dev/sdb

   # Method 3: Using DBAN (boot from USB)
   # Download DBAN ISO and create bootable USB

   # For SSDs, use secure erase
   sudo hdparm --user-master u --security-set-pass p /dev/sdb
   sudo hdparm --user-master u --security-erase p /dev/sdb


Coding Examples
---------------


Python Disk Management Script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   #!/usr/bin/env python3
   """
   Disk management utility for Ubuntu 22.04
   """
   import subprocess
   import json
   import os
   import sys

   class DiskManager:
       def __init__(self):
           self.check_root_privileges()

       def check_root_privileges(self):
           """Check if running with root privileges"""
           if os.geteuid() != 0:
               print("This script requires root privileges. Run with sudo.")
               sys.exit(1)

       def list_disks(self):
           """List all available disks"""
           try:
               result = subprocess.run(['lsblk', '-J'], capture_output=True, text=True)
               data = json.loads(result.stdout)
               return data['blockdevices']
           except Exception as e:
               print(f"Error listing disks: {e}")
               return []

       def get_disk_info(self, device):
           """Get detailed information about a disk"""
           try:
               # Get basic info
               result = subprocess.run(['lsblk', '-J', device],
                                     capture_output=True, text=True)
               basic_info = json.loads(result.stdout)

               # Get SMART info
               smart_result = subprocess.run(['smartctl', '-i', device],
                                           capture_output=True, text=True)

               return {
                   'basic': basic_info,
                   'smart': smart_result.stdout if smart_result.returncode == 0 else 'N/A'
               }
           except Exception as e:
               return {'error': str(e)}

       def create_partition(self, device, size='100%'):
           """Create a new partition"""
           try:
               # Create GPT partition table
               subprocess.run(['parted', device, 'mklabel', 'gpt'], check=True)

               # Create partition
               subprocess.run(['parted', device, 'mkpart', 'primary',
                             'ext4', '0%', size], check=True)

               return True
           except subprocess.CalledProcessError as e:
               print(f"Error creating partition: {e}")
               return False

       def format_partition(self, device, filesystem='ext4'):
           """Format a partition with specified filesystem"""
           try:
               if filesystem == 'ext4':
                   subprocess.run(['mkfs.ext4', '-F', device], check=True)
               elif filesystem == 'xfs':
                   subprocess.run(['mkfs.xfs', '-f', device], check=True)
               elif filesystem == 'btrfs':
                   subprocess.run(['mkfs.btrfs', '-f', device], check=True)
               else:
                   raise ValueError(f"Unsupported filesystem: {filesystem}")

               return True
           except subprocess.CalledProcessError as e:
               print(f"Error formatting partition: {e}")
               return False

       def mount_partition(self, device, mountpoint, options='defaults'):
           """Mount a partition"""
           try:
               # Create mountpoint if it doesn't exist
               os.makedirs(mountpoint, exist_ok=True)

               # Mount the partition
               subprocess.run(['mount', '-o', options, device, mountpoint],
                            check=True)

               return True
           except subprocess.CalledProcessError as e:
               print(f"Error mounting partition: {e}")
               return False

       def check_filesystem(self, device):
           """Check filesystem integrity"""
           try:
               result = subprocess.run(['fsck', '-n', device],
                                     capture_output=True, text=True)
               return {
                   'status': 'clean' if result.returncode == 0 else 'errors',
                   'output': result.stdout
               }
           except subprocess.CalledProcessError as e:
               return {'status': 'error', 'output': str(e)}

   # Example usage
   if __name__ == "__main__":
       dm = DiskManager()

       print("=== Available Disks ===")
       disks = dm.list_disks()
       for disk in disks:
           print(f"Device: {disk['name']}, Size: {disk['size']}, Type: {disk['type']}")

       # Interactive disk management
       if len(sys.argv) > 1:
           device = sys.argv[1]
           info = dm.get_disk_info(device)
           print(f"\\nDisk information for {device}:")
           print(json.dumps(info, indent=2))


Bash Disk Monitoring Script
~~~~~~~~~~~~~~~~~~~~~~~~~~~

   #!/bin/bash
   # disk_monitor.sh - Comprehensive disk monitoring for Ubuntu 22.04

   # Configuration
   ALERT_THRESHOLD=85  # Alert when disk usage exceeds this percentage
   EMAIL_ALERT="admin@example.com"
   LOG_FILE="/var/log/disk_monitor.log"

   # Colors
   RED='\033[0;31m'
   GREEN='\033[0;32m'
   YELLOW='\033[1;33m'
   BLUE='\033[0;34m'
   NC='\033[0m'

   # Logging function
   log_message() {
       echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
   }

   # Check disk usage
   check_disk_usage() {
       echo -e "${BLUE}=== Disk Usage Check ===${NC}"

       df -h | grep -vE '^Filesystem|tmpfs|cdrom' | awk '{print $5 " " $1 " " $6}' | while read output; do
           usage=$(echo $output | awk '{print $1}' | sed 's/%//g')
           partition=$(echo $output | awk '{print $2}')
           mountpoint=$(echo $output | awk '{print $3}')

           if [ $usage -ge $ALERT_THRESHOLD ]; then
               echo -e "${RED}WARNING: $partition ($mountpoint) is ${usage}% full${NC}"
               log_message "HIGH USAGE: $partition ($mountpoint) is ${usage}% full"

               # Send email alert if configured
               if command -v mail &> /dev/null && [ ! -z "$EMAIL_ALERT" ]; then
                   echo "Disk usage alert: $partition ($mountpoint) is ${usage}% full" | \
                       mail -s "Disk Usage Alert - $(hostname)" "$EMAIL_ALERT"
               fi
           else
               echo -e "${GREEN}OK: $partition ($mountpoint) is ${usage}% full${NC}"
           fi
       done
   }

   # Check disk health using SMART
   check_disk_health() {
       echo -e "${BLUE}=== Disk Health Check ===${NC}"

       for disk in /dev/sd[a-z]; do
           if [ -b "$disk" ]; then
               echo "Checking $disk..."

               if command -v smartctl &> /dev/null; then
                   health=$(smartctl -H "$disk" 2>/dev/null | grep "SMART overall-health" | awk '{print $6}')

                   if [ "$health" = "PASSED" ]; then
                       echo -e "${GREEN}$disk: Health OK${NC}"
                   else
                       echo -e "${RED}$disk: Health FAILED${NC}"
                       log_message "DISK HEALTH: $disk health check failed"
                   fi

                   # Check temperature
                   temp=$(smartctl -A "$disk" 2>/dev/null | grep Temperature_Celsius | awk '{print $10}')
                   if [ ! -z "$temp" ]; then
                       if [ "$temp" -gt 55 ]; then
                           echo -e "${YELLOW}$disk: Temperature high (${temp}°C)${NC}"
                       else
                           echo -e "${GREEN}$disk: Temperature OK (${temp}°C)${NC}"
                       fi
                   fi
               else
                   echo "smartctl not available. Install with: sudo apt install smartmontools"
               fi
           fi
       done
   }

   # Monitor I/O performance
   monitor_io() {
       echo -e "${BLUE}=== I/O Performance Monitor ===${NC}"

       if command -v iostat &> /dev/null; then
           iostat -x 1 3 | tail -n +4
       else
           echo "iostat not available. Install with: sudo apt install sysstat"
       fi
   }

   # Find large files
   find_large_files() {
       echo -e "${BLUE}=== Large Files (>1GB) ===${NC}"

       find / -type f -size +1G -exec ls -lh {} \; 2>/dev/null | \
           awk '{print $5 "\t" $9}' | sort -hr | head -10
   }

   # Clean temporary files
   cleanup_temp() {
       echo -e "${BLUE}=== Cleaning Temporary Files ===${NC}"

       # Get initial disk usage
       initial_usage=$(df / | tail -1 | awk '{print $3}')

       # Clean apt cache
       apt-get autoclean -y
       apt-get autoremove -y

       # Clean logs older than 30 days
       find /var/log -name "*.log" -mtime +30 -delete

       # Clean temporary files
       find /tmp -type f -mtime +7 -delete
       find /var/tmp -type f -mtime +7 -delete

       # Clean user caches
       find /home -name ".cache" -type d -exec rm -rf {}/thumbnails/* \; 2>/dev/null

       # Get final disk usage
       final_usage=$(df / | tail -1 | awk '{print $3}')

       # Calculate space freed
       space_freed=$((initial_usage - final_usage))
       echo -e "${GREEN}Cleanup completed. Space freed: ${space_freed}KB${NC}"

       log_message "CLEANUP: Freed ${space_freed}KB of disk space"
   }

   # Generate disk report
   generate_report() {
       report_file="/tmp/disk_report_$(date +%Y%m%d_%H%M%S).txt"

       {
           echo "Disk Report for $(hostname) - $(date)"
           echo "=================================================="
           echo ""

           echo "Disk Usage:"
           df -h
           echo ""

           echo "Largest Directories:"
           du -h /home /var /usr 2>/dev/null | sort -hr | head -10
           echo ""

           echo "Mount Points:"
           mount | grep "^/dev"
           echo ""

           echo "Block Devices:"
           lsblk

       } > "$report_file"

       echo -e "${GREEN}Report generated: $report_file${NC}"

       # Email report if configured
       if command -v mail &> /dev/null && [ ! -z "$EMAIL_ALERT" ]; then
           cat "$report_file" | mail -s "Disk Report - $(hostname)" "$EMAIL_ALERT"
       fi
   }

   # Main menu
   case "${1:-help}" in
       "usage")
           check_disk_usage
           ;;
       "health")
           check_disk_health
           ;;
       "io")
           monitor_io
           ;;
       "large")
           find_large_files
           ;;
       "clean")
           cleanup_temp
           ;;
       "report")
           generate_report
           ;;
       "all")
           check_disk_usage
           check_disk_health
           monitor_io
           find_large_files
           ;;
       "help"|*)
           echo "Disk Monitor for Ubuntu 22.04"
           echo "Usage: $0 [option]"
           echo ""
           echo "Options:"
           echo "  usage  - Check disk usage"
           echo "  health - Check disk health (SMART)"
           echo "  io     - Monitor I/O performance"
           echo "  large  - Find large files"
           echo "  clean  - Clean temporary files"
           echo "  report - Generate comprehensive report"
           echo "  all    - Run all checks"
           ;;
   esac


Best Practices for Disk Management
----------------------------------


Planning and Strategy
~~~~~~~~~~~~~~~~~~~~~

1. **Partition Strategy**:

   * Separate /home from root partition

   * Use dedicated partitions for /var and /tmp

   * Plan for future expansion

2. **Filesystem Selection**:

   * ext4: General purpose, reliable

   * XFS: Large files and high performance

   * Btrfs: Advanced features, snapshots

   * ZFS: Enterprise features, data integrity

3. **Monitoring and Maintenance**:

   * Regular SMART checks

   * Monitor disk usage trends

   * Schedule regular filesystem checks

   * Implement log rotation


Ubuntu 22.04 Optimization Tips
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   # Enable automatic TRIM for SSDs
   sudo systemctl enable fstrim.timer

   # Optimize mount options for performance
   # Add to /etc/fstab:
   # /dev/sda1 / ext4 defaults,noatime,discard 0 1

   # Configure I/O scheduler for SSDs
   echo none | sudo tee /sys/block/sda/queue/scheduler

   # Set up monitoring
   sudo apt install smartmontools sysstat
   sudo systemctl enable smartd

   # Configure SMART monitoring
   sudo vim /etc/smartd.conf
   # Add: /dev/sda -a -o on -S on -s (S/../.././02|L/../../6/03)


Security and Recovery
~~~~~~~~~~~~~~~~~~~~~

1. **Backup Strategy**:

   * Regular automated backups

   * Test restoration procedures

   * Offsite backup storage

   * Document recovery procedures

2. **Access Control**:

   * Proper file permissions

   * User and group management

   * Audit trail logging

   * Encryption for sensitive data

   # Set up automatic backups
   sudo apt install rsync

   # Create backup script
   cat > /usr/local/bin/backup.sh << 'EOF'
   #!/bin/bash
   rsync -avz --delete /home/ /backup/home/
   rsync -avz --delete /etc/ /backup/etc/
   EOF

   chmod +x /usr/local/bin/backup.sh

   # Schedule with cron
   echo "0 2 * * * /usr/local/bin/backup.sh" | sudo crontab -

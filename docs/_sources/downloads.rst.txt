Downloads and Resources
=======================

This section provides information on how to generate and download the documentation in various formats, along with additional resources for storage management on Ubuntu 22.04.

.. contents::
   :local:
   :depth: 2

Documentation Formats
---------------------

Building the Documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~

This documentation is built using Sphinx and can be generated in multiple formats. Follow these steps to build the documentation locally:

**Prerequisites:**

.. code-block:: bash

   # Install Sphinx and required dependencies
   sudo apt update
   sudo apt install python3-pip
   pip3 install sphinx sphinx-rtd-theme

   # Install additional packages for PDF generation
   sudo apt install texlive-latex-recommended texlive-fonts-recommended texlive-latex-extra

   # Install packages for EPUB generation
   pip3 install sphinx-epub

**Building HTML Documentation:**

.. code-block:: bash

   # Navigate to the documentation directory
   cd /path/to/sphinx/source

   # Build HTML documentation
   sphinx-build -b html . _build/html

   # Open in browser
   firefox _build/html/index.html

**Building PDF Documentation:**

.. code-block:: bash

   # Build LaTeX files first
   sphinx-build -b latex . _build/latex

   # Generate PDF from LaTeX
   cd _build/latex
   make

   # The PDF will be available as storage-guide.pdf

**Building EPUB Documentation:**

.. code-block:: bash

   # Build EPUB format
   sphinx-build -b epub . _build/epub

   # The EPUB file will be in _build/epub/

**Building All Formats:**

.. code-block:: bash

   #!/bin/bash
   # build-docs.sh - Complete documentation build script

   set -e

   SOURCE_DIR="."
   BUILD_DIR="_build"
   PROJECT_NAME="Ubuntu-Storage-Guide"

   echo "Building Ubuntu 22.04 Storage Documentation..."

   # Clean previous builds
   rm -rf "$BUILD_DIR"
   mkdir -p "$BUILD_DIR"

   # Build HTML
   echo "Building HTML documentation..."
   sphinx-build -b html "$SOURCE_DIR" "$BUILD_DIR/html"

   # Build PDF
   echo "Building PDF documentation..."
   sphinx-build -b latex "$SOURCE_DIR" "$BUILD_DIR/latex"
   cd "$BUILD_DIR/latex"
   make
   cp *.pdf "../${PROJECT_NAME}.pdf"
   cd - > /dev/null

   # Build EPUB
   echo "Building EPUB documentation..."
   sphinx-build -b epub "$SOURCE_DIR" "$BUILD_DIR/epub"
   cp "$BUILD_DIR/epub/${PROJECT_NAME}.epub" "$BUILD_DIR/"

   # Create downloadable archive
   echo "Creating download archive..."
   cd "$BUILD_DIR"
   tar -czf "${PROJECT_NAME}-docs.tar.gz" html/ *.pdf *.epub
   cd - > /dev/null

   echo "Documentation build complete!"
   echo "Available formats:"
   echo "  HTML: $BUILD_DIR/html/index.html"
   echo "  PDF:  $BUILD_DIR/${PROJECT_NAME}.pdf"
   echo "  EPUB: $BUILD_DIR/${PROJECT_NAME}.epub"
   echo "  Archive: $BUILD_DIR/${PROJECT_NAME}-docs.tar.gz"

Download Instructions
~~~~~~~~~~~~~~~~~~~~

**📥 Available Download Formats:**

.. raw:: html

   <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
   <h3 style="color: #2c3e50;">📋 Quick Downloads</h3>
   <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
   
   <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #e74c3c;">
   <h4 style="margin: 0 0 10px 0; color: #e74c3c;">📄 PDF Format</h4>
   <p style="margin: 0 0 10px 0; font-size: 14px;">Complete guide in PDF format<br>Perfect for offline reading</p>
   <a href="downloads/Ubuntu-Storage-Guide.pdf" style="background: #e74c3c; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; font-size: 14px;">Download PDF</a>
   </div>
   
   <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #3498db;">
   <h4 style="margin: 0 0 10px 0; color: #3498db;">📱 EPUB Format</h4>
   <p style="margin: 0 0 10px 0; font-size: 14px;">E-book format for e-readers<br>Mobile-friendly reading</p>
   <a href="downloads/Ubuntu-Storage-Guide.epub" style="background: #3498db; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; font-size: 14px;">Download EPUB</a>
   </div>
   
   <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #27ae60;">
   <h4 style="margin: 0 0 10px 0; color: #27ae60;">🌐 Single HTML</h4>
   <p style="margin: 0 0 10px 0; font-size: 14px;">Complete guide in one HTML file<br>Easy sharing and archiving</p>
   <a href="downloads/Ubuntu-Storage-Guide-Complete.html" style="background: #27ae60; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; font-size: 14px;">Download HTML</a>
   </div>
   
   <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #f39c12;">
   <h4 style="margin: 0 0 10px 0; color: #f39c12;">📦 Complete Archive</h4>
   <p style="margin: 0 0 10px 0; font-size: 14px;">All formats in one ZIP<br>HTML, PDF, EPUB & Text</p>
   <a href="downloads/Ubuntu-Storage-Guide-All-Formats.zip" style="background: #f39c12; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; font-size: 14px;">Download All</a>
   </div>
   
   </div>
   </div>

**For End Users:**

1. **📄 PDF Version:**
   - Complete documentation in a single PDF file
   - Best for offline reading and printing
   - Preserves formatting and includes bookmarks
   - Professional layout with headers and page numbers

2. **📱 EPUB Version:**
   - E-book format compatible with most e-readers
   - Best for mobile devices and e-reader applications
   - Supports reflowable text and adjustable font sizes
   - Works with Kindle, Apple Books, Adobe Digital Editions

3. **🌐 HTML Version:**
   - Complete website version with navigation and search
   - Best for online reading and reference
   - Includes interactive elements and cross-references
   - Available as single file or complete website archive

4. **📝 Text Version:**
   - Plain text format for maximum compatibility
   - Accessible for screen readers and text processing
   - Lightweight and universally readable

**Quick Download Commands:**

.. code-block:: bash

   # Download specific formats using wget or curl
   
   # PDF version
   wget /downloads/Ubuntu-Storage-Guide.pdf
   
   # EPUB version
   wget /downloads/Ubuntu-Storage-Guide.epub
   
   # Complete archive with all formats
   wget /downloads/Ubuntu-Storage-Guide-All-Formats.zip
   
   # Extract complete archive
   unzip Ubuntu-Storage-Guide-All-Formats.zip

Automation Scripts
-----------------

Automated Build Script
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

   #!/bin/bash
   # auto-build-docs.sh - Automated documentation builder with CI/CD integration

   set -euo pipefail

   # Configuration
   PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
   SOURCE_DIR="$PROJECT_ROOT/source"
   BUILD_DIR="$PROJECT_ROOT/_build"
   OUTPUT_DIR="$PROJECT_ROOT/dist"
   VERSION=$(date +%Y.%m.%d)

   # Colors for output
   RED='\033[0;31m'
   GREEN='\033[0;32m'
   YELLOW='\033[1;33m'
   NC='\033[0m' # No Color

   log_info() {
       echo -e "${GREEN}[INFO]${NC} $1"
   }

   log_warn() {
       echo -e "${YELLOW}[WARN]${NC} $1"
   }

   log_error() {
       echo -e "${RED}[ERROR]${NC} $1"
   }

   check_dependencies() {
       log_info "Checking dependencies..."
       
       local missing_deps=()
       
       if ! command -v sphinx-build &> /dev/null; then
           missing_deps+=("sphinx")
       fi
       
       if ! command -v pdflatex &> /dev/null; then
           missing_deps+=("texlive-latex-recommended")
       fi
       
       if [ ${#missing_deps[@]} -ne 0 ]; then
           log_error "Missing dependencies: ${missing_deps[*]}"
           log_info "Install with: sudo apt install python3-sphinx texlive-latex-recommended"
           exit 1
       fi
       
       log_info "All dependencies satisfied"
   }

   clean_build() {
       log_info "Cleaning previous builds..."
       rm -rf "$BUILD_DIR" "$OUTPUT_DIR"
       mkdir -p "$BUILD_DIR" "$OUTPUT_DIR"
   }

   build_html() {
       log_info "Building HTML documentation..."
       if sphinx-build -b html -W --keep-going "$SOURCE_DIR" "$BUILD_DIR/html"; then
           log_info "HTML build successful"
           return 0
       else
           log_error "HTML build failed"
           return 1
       fi
   }

   build_pdf() {
       log_info "Building PDF documentation..."
       
       # Build LaTeX first
       if sphinx-build -b latex -W --keep-going "$SOURCE_DIR" "$BUILD_DIR/latex"; then
           cd "$BUILD_DIR/latex"
           if make; then
               log_info "PDF build successful"
               cp *.pdf "$OUTPUT_DIR/Ubuntu-Storage-Guide-${VERSION}.pdf"
               cd - > /dev/null
               return 0
           else
               log_error "PDF compilation failed"
               cd - > /dev/null
               return 1
           fi
       else
           log_error "LaTeX build failed"
           return 1
       fi
   }

   build_epub() {
       log_info "Building EPUB documentation..."
       if sphinx-build -b epub -W --keep-going "$SOURCE_DIR" "$BUILD_DIR/epub"; then
           cp "$BUILD_DIR/epub"/*.epub "$OUTPUT_DIR/Ubuntu-Storage-Guide-${VERSION}.epub"
           log_info "EPUB build successful"
           return 0
       else
           log_error "EPUB build failed"
           return 1
       fi
   }

   create_archives() {
       log_info "Creating distribution archives..."
       
       cd "$BUILD_DIR"
       
       # Create HTML archive
       tar -czf "$OUTPUT_DIR/Ubuntu-Storage-Guide-HTML-${VERSION}.tar.gz" html/
       
       # Create complete archive
       tar -czf "$OUTPUT_DIR/Ubuntu-Storage-Guide-Complete-${VERSION}.tar.gz" \
           html/ latex/ epub/
       
       cd - > /dev/null
       
       log_info "Archives created successfully"
   }

   generate_checksums() {
       log_info "Generating checksums..."
       cd "$OUTPUT_DIR"
       sha256sum * > "checksums-${VERSION}.sha256"
       cd - > /dev/null
   }

   show_summary() {
       log_info "Build Summary:"
       echo "======================================"
       echo "Version: $VERSION"
       echo "Build Directory: $BUILD_DIR"
       echo "Output Directory: $OUTPUT_DIR"
       echo ""
       echo "Generated Files:"
       ls -lh "$OUTPUT_DIR"
       echo ""
       echo "Total Size: $(du -sh "$OUTPUT_DIR" | cut -f1)"
   }

   # Main execution
   main() {
       log_info "Starting automated documentation build (Version: $VERSION)"
       
       check_dependencies
       clean_build
       
       local build_errors=0
       
       # Build all formats
       build_html || ((build_errors++))
       build_pdf || ((build_errors++))
       build_epub || ((build_errors++))
       
       if [ $build_errors -eq 0 ]; then
           create_archives
           generate_checksums
           show_summary
           log_info "All builds completed successfully!"
       else
           log_warn "$build_errors build(s) failed, but continuing with available outputs"
       fi
   }

   # Handle command line arguments
   case "${1:-all}" in
       "html")
           check_dependencies
           clean_build
           build_html
           ;;
       "pdf")
           check_dependencies
           clean_build
           build_pdf
           ;;
       "epub")
           check_dependencies
           clean_build
           build_epub
           ;;
       "all"|"")
           main
           ;;
       *)
           echo "Usage: $0 [html|pdf|epub|all]"
           exit 1
           ;;
   esac

Continuous Integration Script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   # .github/workflows/build-docs.yml - GitHub Actions workflow
   name: Build Documentation

   on:
     push:
       branches: [ main, develop ]
     pull_request:
       branches: [ main ]

   jobs:
     build:
       runs-on: ubuntu-22.04
       
       steps:
       - uses: actions/checkout@v3
       
       - name: Set up Python
         uses: actions/setup-python@v4
         with:
           python-version: '3.10'
       
       - name: Install dependencies
         run: |
           sudo apt-get update
           sudo apt-get install -y texlive-latex-recommended texlive-fonts-recommended texlive-latex-extra
           pip install sphinx sphinx-rtd-theme
       
       - name: Build documentation
         run: |
           chmod +x auto-build-docs.sh
           ./auto-build-docs.sh
       
       - name: Upload artifacts
         uses: actions/upload-artifact@v3
         with:
           name: documentation
           path: dist/
       
       - name: Deploy to GitHub Pages
         if: github.ref == 'refs/heads/main'
         uses: peaceiris/actions-gh-pages@v3
         with:
           github_token: ${{ secrets.GITHUB_TOKEN }}
           publish_dir: _build/html

Docker Build Environment
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: dockerfile

   # Dockerfile for documentation building
   FROM ubuntu:22.04

   ENV DEBIAN_FRONTEND=noninteractive

   # Install dependencies
   RUN apt-get update && apt-get install -y \
       python3 \
       python3-pip \
       texlive-latex-recommended \
       texlive-fonts-recommended \
       texlive-latex-extra \
       make \
       && rm -rf /var/lib/apt/lists/*

   # Install Python packages
   RUN pip3 install sphinx sphinx-rtd-theme

   # Set working directory
   WORKDIR /docs

   # Copy build script
   COPY auto-build-docs.sh /usr/local/bin/
   RUN chmod +x /usr/local/bin/auto-build-docs.sh

   # Default command
   CMD ["/usr/local/bin/auto-build-docs.sh"]

.. code-block:: bash

   # Docker build and run commands
   
   # Build the Docker image
   docker build -t storage-docs-builder .
   
   # Run documentation build
   docker run -v $(pwd):/docs storage-docs-builder
   
   # Extract built documentation
   docker run -v $(pwd):/docs -v $(pwd)/output:/output \
       storage-docs-builder cp -r /docs/dist/* /output/

Additional Resources
-------------------

Official Documentation Links
~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Ubuntu Documentation:**

- `Ubuntu Server Guide <https://ubuntu.com/server/docs>`_ - Official Ubuntu Server documentation
- `Ubuntu Storage Guide <https://help.ubuntu.com/community/LinuxFilesystemsExplained>`_ - Community filesystem documentation
- `Ubuntu LVM Guide <https://help.ubuntu.com/community/LVM>`_ - Logical Volume Management

**Filesystem Documentation:**

- `Ext4 Documentation <https://www.kernel.org/doc/Documentation/filesystems/ext4.txt>`_ - Kernel documentation for ext4
- `XFS Documentation <https://xfs.wiki.kernel.org/>`_ - XFS filesystem wiki
- `Btrfs Documentation <https://btrfs.wiki.kernel.org/>`_ - Btrfs filesystem wiki
- `ZFS on Linux <https://openzfs.github.io/openzfs-docs/>`_ - OpenZFS documentation

**RAID and Storage:**

- `Linux RAID Wiki <https://raid.wiki.kernel.org/>`_ - Comprehensive RAID documentation
- `LVM HOWTO <https://tldp.org/HOWTO/LVM-HOWTO/>`_ - Linux Documentation Project LVM guide
- `Storage Performance <https://www.kernel.org/doc/Documentation/block/>`_ - Kernel block layer documentation

Useful Tools and Utilities
~~~~~~~~~~~~~~~~~~~~~~~~~~

**System Information:**

.. code-block:: bash

   # Essential storage tools installation
   sudo apt install -y \
       lvm2 \
       mdadm \
       smartmontools \
       parted \
       gparted \
       hdparm \
       iotop \
       sysstat \
       tree \
       ncdu \
       htop

**Monitoring Tools:**

.. code-block:: bash

   # Advanced monitoring tools
   sudo apt install -y \
       nagios-plugins-basic \
       zabbix-agent \
       collectd \
       grafana \
       prometheus-node-exporter

**Backup Tools:**

.. code-block:: bash

   # Backup and recovery tools
   sudo apt install -y \
       rsync \
       rdiff-backup \
       duplicity \
       borgbackup \
       testdisk \
       photorec \
       ddrescue

Scripts and Templates
~~~~~~~~~~~~~~~~~~~~

**Makefile for Documentation:**

.. code-block:: makefile

   # Makefile for Ubuntu Storage Documentation
   
   SOURCEDIR = source
   BUILDDIR = _build
   OUTPUTDIR = dist
   VERSION = $(shell date +%Y.%m.%d)
   PROJECT = Ubuntu-Storage-Guide
   
   .PHONY: help clean html pdf epub all archive
   
   help:
   	@echo "Ubuntu Storage Documentation Build System"
   	@echo ""
   	@echo "Available targets:"
   	@echo "  html     Build HTML documentation"
   	@echo "  pdf      Build PDF documentation"
   	@echo "  epub     Build EPUB documentation"
   	@echo "  all      Build all formats"
   	@echo "  archive  Create distribution archives"
   	@echo "  clean    Remove build artifacts"
   	@echo "  install  Install dependencies"
   
   clean:
   	rm -rf $(BUILDDIR) $(OUTPUTDIR)
   	@echo "Build artifacts cleaned"
   
   install:
   	sudo apt update
   	sudo apt install -y python3-sphinx texlive-latex-recommended
   	pip3 install sphinx-rtd-theme
   	@echo "Dependencies installed"
   
   html:
   	mkdir -p $(BUILDDIR)
   	sphinx-build -b html $(SOURCEDIR) $(BUILDDIR)/html
   	@echo "HTML documentation built in $(BUILDDIR)/html"
   
   pdf:
   	mkdir -p $(BUILDDIR) $(OUTPUTDIR)
   	sphinx-build -b latex $(SOURCEDIR) $(BUILDDIR)/latex
   	cd $(BUILDDIR)/latex && make
   	cp $(BUILDDIR)/latex/*.pdf $(OUTPUTDIR)/$(PROJECT)-$(VERSION).pdf
   	@echo "PDF documentation built: $(OUTPUTDIR)/$(PROJECT)-$(VERSION).pdf"
   
   epub:
   	mkdir -p $(BUILDDIR) $(OUTPUTDIR)
   	sphinx-build -b epub $(SOURCEDIR) $(BUILDDIR)/epub
   	cp $(BUILDDIR)/epub/*.epub $(OUTPUTDIR)/$(PROJECT)-$(VERSION).epub
   	@echo "EPUB documentation built: $(OUTPUTDIR)/$(PROJECT)-$(VERSION).epub"
   
   all: html pdf epub
   	@echo "All documentation formats built successfully"
   
   archive: all
   	mkdir -p $(OUTPUTDIR)
   	cd $(BUILDDIR) && tar -czf ../$(OUTPUTDIR)/$(PROJECT)-HTML-$(VERSION).tar.gz html/
   	cd $(OUTPUTDIR) && tar -czf $(PROJECT)-Complete-$(VERSION).tar.gz *.pdf *.epub *.tar.gz
   	cd $(OUTPUTDIR) && sha256sum * > checksums-$(VERSION).sha256
   	@echo "Distribution archives created in $(OUTPUTDIR)"

Community Resources
~~~~~~~~~~~~~~~~~~

**Forums and Communities:**

- `Ubuntu Forums - Storage Section <https://ubuntuforums.org/forumdisplay.php?f=35>`_
- `Ask Ubuntu - Storage Questions <https://askubuntu.com/questions/tagged/storage>`_
- `Reddit r/Ubuntu <https://reddit.com/r/Ubuntu>`_
- `Ubuntu Discourse <https://discourse.ubuntu.com/>`_

**Professional Resources:**

- `Linux Professional Institute (LPI) <https://www.lpi.org/>`_ - Linux certification
- `Red Hat Training <https://www.redhat.com/en/services/training>`_ - Enterprise Linux training
- `SUSE Training <https://www.suse.com/training/>`_ - SUSE Linux Enterprise training

**Books and Publications:**

- "Linux System Administration" by Tom Adelstein
- "UNIX and Linux System Administration Handbook" by Evi Nemeth
- "Linux Storage Best Practices" by various authors
- "ZFS Administration Guide" by Oracle

Getting Help and Support
------------------------

Issue Reporting
~~~~~~~~~~~~~~

If you find errors in this documentation or have suggestions for improvement:

1. **Documentation Issues:**
   - Create an issue on the project repository
   - Include specific page/section references
   - Provide detailed description of the problem

2. **Technical Issues:**
   - Check the troubleshooting section first
   - Search existing forums and documentation
   - Provide system information and error messages

3. **Feature Requests:**
   - Suggest new topics or sections
   - Provide use cases and justification
   - Consider contributing content yourself

Contributing to Documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This documentation is open source and welcomes contributions:

.. code-block:: bash

   # Fork the repository
   git clone https://github.com/username/ubuntu-storage-docs.git
   cd ubuntu-storage-docs
   
   # Create a new branch
   git checkout -b feature/new-content
   
   # Make your changes
   # Edit .rst files in the source/ directory
   
   # Build and test
   make html
   
   # Commit and push
   git add .
   git commit -m "Add new storage topic: XYZ"
   git push origin feature/new-content
   
   # Create a pull request

**Contribution Guidelines:**

- Follow the existing documentation style
- Include practical examples and code snippets
- Test all commands on Ubuntu 22.04
- Update the table of contents if adding new sections
- Include relevant cross-references

Contact Information
~~~~~~~~~~~~~~~~~~

For questions, suggestions, or support:

- **Email:** docs@storage-guide.org
- **IRC:** #ubuntu-storage on Libera.Chat
- **Matrix:** #ubuntu-storage:matrix.org
- **GitHub:** https://github.com/ubuntu-storage-docs

This comprehensive documentation package provides everything needed to understand and manage storage systems on Ubuntu 22.04, available in multiple formats for different use cases and preferences.
